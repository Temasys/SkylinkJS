{
    "project": {
        "name": "skylinkjs",
        "description": "WebRTC real-time video conversation library",
        "version": "0.5.5",
        "url": "https://temasys.github.io/"
    },
    "files": {
        "source/template/header.js": {
            "name": "source/template/header.js",
            "modules": {},
            "classes": {
                "Skylink": 1
            },
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-channel.js": {
            "name": "source/data-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-process.js": {
            "name": "source/data-process.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-transfer.js": {
            "name": "source/data-transfer.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-candidate.js": {
            "name": "source/ice-candidate.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-connection.js": {
            "name": "source/ice-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-connection.js": {
            "name": "source/peer-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-data.js": {
            "name": "source/peer-data.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-handshake.js": {
            "name": "source/peer-handshake.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-connection.js": {
            "name": "source/room-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-init.js": {
            "name": "source/room-init.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-debug.js": {
            "name": "source/skylink-debug.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-events.js": {
            "name": "source/skylink-events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-channel.js": {
            "name": "source/socket-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-message.js": {
            "name": "source/socket-message.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-media.js": {
            "name": "source/stream-media.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-sdp.js": {
            "name": "source/stream-sdp.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Skylink": {
            "name": "Skylink",
            "shortname": "Skylink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/template/header.js",
            "line": 8,
            "description": "Please refer to the {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}\nmethod for a guide to initializing Skylink.<br>\nPlease Note:\n- You must subscribe Skylink events before calling\n  {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}.\n- You will need an API key to use Skylink, if you do not have one you can\n  [register for a developer account](http://\n  developer.temasys.com.sg) in the Skylink Developer Console.",
            "is_constructor": 1,
            "example": [
                "\n  // Getting started on how to use Skylink\n  var SkylinkDemo = new Skylink();\n  SkylinkDemo.init('apiKey');\n\n  SkylinkDemo.joinRoom('my_room', {\n    userData: 'My Username',\n    audio: true,\n    video: true\n  });\n\n  SkylinkDemo.on('incomingStream', function (peerId, stream, peerInfo, isSelf) {\n    if (isSelf) {\n      attachMediaStream(document.getElementById('selfVideo'), stream);\n    } else {\n      var peerVideo = document.createElement('video');\n      peerVideo.id = peerId;\n      peerVideo.autoplay = 'autoplay';\n      document.getElementById('peersVideo').appendChild(peerVideo);\n      attachMediaStream(peerVideo, stream);\n    }\n  });\n\n  SkylinkDemo.on('peerLeft', function (peerId, peerInfo, isSelf) {\n    if (isSelf) {\n      document.getElementById('selfVideo').src = '';\n    } else {\n      var peerVideo = document.getElementById(peerId);\n      document.getElementById('peersVideo').removeChild(peerVideo);\n    }\n  });"
            ],
            "since": "0.5.0"
        }
    },
    "classitems": [
        {
            "file": "source/template/header.js",
            "line": 58,
            "description": "Version of Skylink",
            "itemtype": "attribute",
            "name": "VERSION",
            "type": "String",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 1,
            "description": "The list of datachannel states.\n- Based on [w3 specification documentation](http://dev.w3.org/2011/\n  webrtc/editor/webrtc.html#idl-def-RTCDataChannelState) with an additional <u>ERROR</u> state\n  to facilitate the onerror event handler of RTCDataChannel.\n- This is the RTCDataChannelState of the peer.\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "DATA_CHANNEL_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "CONNECTING",
                    "description": "The user agent is attempting to establish\n  the underlying data transport. This is the initial state of a\n  RTCDataChannel object created with createDataChannel().",
                    "type": "String"
                },
                {
                    "name": "OPEN",
                    "description": "The underlying data transport is established\n  and communication is possible. This is the initial state of a\n  RTCDataChannel object dispatched as a part of a RTCDataChannelEvent.",
                    "type": "String"
                },
                {
                    "name": "CLOSING",
                    "description": "The procedure to close down the underlying\n  data transport has started.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The underlying data transport has been closed\n  or could not be established.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Datachannel is not available due to an exception.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 33,
            "description": "The current state if datachannel is enabled.",
            "itemtype": "attribute",
            "name": "_enableDataChannel",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 45,
            "description": "Internal array of datachannels.",
            "itemtype": "attribute",
            "name": "_dataChannels",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 56,
            "description": "Create a DataChannel. Only\n[SCTPDataChannel](https://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-08#section-6)\nsupport.",
            "itemtype": "method",
            "name": "_createDataChannel",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer which the datachannel is connected to",
                    "type": "String"
                },
                {
                    "name": "dc",
                    "description": "The datachannel object received.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "trigger": "dataChannelState",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 127,
            "description": "Triggers callback when datachannel readystate matches the one provided.",
            "itemtype": "method",
            "name": "_checkDataChannelReadyState",
            "params": [
                {
                    "name": "dc",
                    "description": "The datachannel to check the readystate.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback once state has reached.",
                    "type": "Function"
                },
                {
                    "name": "state",
                    "description": "The datachannel readystate. [Rel: DATA_CHANNEL_STATE]",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 160,
            "description": "Sends Message using the datachannel.",
            "itemtype": "method",
            "name": "_sendDataChannelMessage",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer's datachannel to send data.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data to send.",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 190,
            "description": "Closes the datachannel.",
            "itemtype": "method",
            "name": "_closeDataChannel",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer's datachannel to close.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 1,
            "description": "The fixed size for each data chunk.",
            "itemtype": "attribute",
            "name": "_CHUNK_FILE_SIZE",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 13,
            "description": "The fixed for each data chunk for firefox implementation.\n- Firefox the sender chunks <code>49152</code> but receives as <code>16384</code>.",
            "itemtype": "attribute",
            "name": "_MOZ_CHUNK_FILE_SIZE",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 26,
            "description": "The list of data transfer data types.\n- <b><i>TODO</i></b>: ArrayBuffer and Blob data transfer in\n  datachannel.\n- The available data transfer data types are:",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_DATA_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "BINARY_STRING",
                    "description": "BinaryString data type.",
                    "type": "String"
                },
                {
                    "name": "ARRAY_BUFFER",
                    "description": "Still-implementing. ArrayBuffer data type.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "BLOB",
                    "description": "Still-implementing. Blob data type.",
                    "type": "String",
                    "optional": true
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 46,
            "description": "Converts base64 string to raw binary data.\n- Doesn't handle URLEncoded DataURIs.\n- See StackOverflow answer #6850276 for code that does this.\n- This is to convert the base64 binary string to a blob.",
            "author": "Code from devnull69 @ stackoverflow.com",
            "itemtype": "method",
            "name": "_base64ToBlob",
            "params": [
                {
                    "name": "dataURL",
                    "description": "Blob base64 dataurl.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 70,
            "description": "Chunks blob data into chunks.",
            "itemtype": "method",
            "name": "_chunkBlobData",
            "params": [
                {
                    "name": "blob",
                    "description": "The blob data to chunk.",
                    "type": "Blob"
                },
                {
                    "name": "blobByteSize",
                    "description": "The blob data size.",
                    "type": "Integer"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1,
            "description": "The list of datachannel protocol types.\n- These are the list of available datachannel protocol types expected to\n  be received.\n- These protocol types are fixed.\n- <b>DATA</b> stage is thrown when JSON failed parsing string, it will\n  then be automatically interpreted as base64 binary string.\n- Right now, the datachannel only supports base64 binary string transfer.\n- The sub-param <b>data</b> is NOT an actual property of each types.",
            "itemtype": "attribute",
            "name": "_DC_PROTOCOL_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "WRQ",
                    "description": "A data transfer request.\n  Sent when a user requests to transfer a data.\n  Received when a peer has requested to transfer a data.\n  Sent in {{#crossLink \"Skylink/_sendBlobDataToPeer:method\"}}\n  _sendBlobDataToPeer(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_WRQProtocolHandler:method\"}}\n  _WRQProtocolHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "data",
                            "description": "The data object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "agent",
                                    "description": "The peer's browser agent.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "The peer's browser version.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "name",
                                    "description": "The data name.",
                                    "type": "String"
                                },
                                {
                                    "name": "size",
                                    "description": "The data size.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "chunkSize",
                                    "description": "The data chunk size expected to receive.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "timeout",
                                    "description": "The timeout to wait for packet response.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "isPrivate",
                                    "description": "Is the data sent private.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "sender",
                                    "description": "The sender's peerId.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of datachannel protocol.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "ACK",
                    "description": "Acknowledge to data transfer request and when data\n  packet is received.\n  Sent when a user responses to a data transfer request.\n  Received when a peer has responded to user's data transfer request.\n  Sent in {{#crossLink \"Skylink/_WRQProtocolHandler:method\"}}\n  _WRQProtocolHandler(){{/crossLink}},\n  {{#crossLink \"Skylink/_DATAProtocolHandler:method\"}}\n  _DATAProtocolHandler(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_ACKProtocolHandler:method\"}}\n  _ACKProtocolHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "data",
                            "description": "The data object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "ackN",
                                    "description": "The acknowledge request number.\n<ul>\n<li><code>0</code> Request accepted. First packet sent.</li>\n<li><code>>0</code> Transfer is going on.</li>\n<li><code>-1</code> Request rejected.</li>\n</ul>",
                                    "type": "String"
                                },
                                {
                                    "name": "sender",
                                    "description": "The sender's peerId.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of datachannel protocol.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "DATA",
                    "description": "Data binaryString has been sent or received.\n  Sent when a user responses to a data transfer acknowledgement.\n  Received when a peer sends a data packet.\n  Sent in {{#crossLink \"Skylink/_ACKProtocolHandler:method\"}}\n  _ACKProtocolHandler(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_DATAProtocolHandler:method\"}}\n  _DATAProtocolHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "data",
                            "description": "The base64 binary string data.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "CANCEL",
                    "description": "Sent to cancel data transfer.\n  Received when a peer has canceled data transfer.\n  Sending part is not yet implemented.\n  Received in {{#crossLink \"Skylink/_CANCELProtocolHandler:method\"}}\n  _CANCELProtocolHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "data",
                            "description": "The data object.",
                            "type": "Array",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The data name.",
                                    "type": "String"
                                },
                                {
                                    "name": "content",
                                    "description": "The error message.",
                                    "type": "String"
                                },
                                {
                                    "name": "sender",
                                    "description": "The sender's peerId.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of datachannel protocol.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "ERROR",
                    "description": "Sent when a timeout waiting for peer response has exceeded limit.\n  Received from peer that timeout has reached its limit.\n  Data transfer has failed.\n  Sent in {{#crossLink \"Skylink/_setDataChannelTimeout:method\"}}\n  _setDataChannelTimeout(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_ERRORProtocolHandler:method\"}}\n  _ERRORProtocolHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "data",
                            "description": "The data object.",
                            "type": "Array",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The data name.",
                                    "type": "String"
                                },
                                {
                                    "name": "content",
                                    "description": "The error message.",
                                    "type": "String"
                                },
                                {
                                    "name": "isUploadError",
                                    "description": "Is the error occurring at upload state.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "sender",
                                    "description": "The sender's peerId.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of datachannel protocol.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "MESSAGE",
                    "description": "Sent a user sends a P2P message.\n  Received when a peer sends a P2P message.\n  Sent in {{#crossLink \"Skylink/sendP2PMessage:method\"}}\n  sendP2PMessage(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_MESSAGEProtocolHandler:method\"}}\n  _MESSAGEProtocolHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "data",
                            "description": "The data object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "target",
                                    "description": "The target peerId to receive the data.",
                                    "type": "String"
                                },
                                {
                                    "name": "data",
                                    "description": "The data to be received.",
                                    "type": "String|JSON"
                                },
                                {
                                    "name": "sender",
                                    "description": "The sender's peerId.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of datachannel protocol.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "final": 1,
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 117,
            "description": "The list of datachannel transfer types.\n- This is used to identify if the stream is an upload stream or\n  a download stream.\n- The available types are:",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "UPLOAD",
                    "description": "The datachannel transfer is an upload stream.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD",
                    "description": "The datachannel transfer is a download stream.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 134,
            "description": "The list of datachannel transfer state.\n- These are the states to inform the state of the data transfer.\n- The list of states would occur are:",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "UPLOAD_REQUEST",
                    "description": "Peer has a data transfer request.",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_STARTED",
                    "description": "Data transfer of upload has just started.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_STARTED",
                    "description": "Data transfer of download has\n  just started.",
                    "type": "String"
                },
                {
                    "name": "UPLOADING",
                    "description": "Data upload transfer is occurring.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOADING",
                    "description": "Data download transfer is occurring.",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_COMPLETED",
                    "description": "Data upload transfer has been completed.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_COMPLETED",
                    "description": "Data download transfer has been\n  completed.",
                    "type": "String"
                },
                {
                    "name": "REJECTED",
                    "description": "Peer rejected user's data transfer request.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Data transfer had an error occurred\n  when uploading or downloading file.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 169,
            "description": "Internal array of data upload transfers.",
            "itemtype": "attribute",
            "name": "_uploadDataTransfers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 180,
            "description": "Internal array of data upload sessions.",
            "itemtype": "attribute",
            "name": "_uploadDataSessions",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 191,
            "description": "Internal array of data download transfers.",
            "itemtype": "attribute",
            "name": "_downloadDataTransfers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 202,
            "description": "Internal array of data download sessions.",
            "itemtype": "attribute",
            "name": "_downloadDataSessions",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 213,
            "description": "Internal array of data transfers timeout.",
            "itemtype": "attribute",
            "name": "_dataTransfersTimeout",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 224,
            "description": "Sets the datachannel timeout.\n- If timeout is met, it will send the 'ERROR' message",
            "itemtype": "method",
            "name": "_setDataChannelTimeout",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the datachannel to set timeout.",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "The timeout to set in seconds.",
                    "type": "Integer"
                },
                {
                    "name": "isSender",
                    "description": "Is peer the sender or the receiver?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 271,
            "description": "Clears the datachannel timeout.",
            "itemtype": "method",
            "name": "_clearDataChannelTimeout",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the datachannel to clear timeout.",
                    "type": "String"
                },
                {
                    "name": "isSender",
                    "description": "Is peer the sender or the receiver.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 289,
            "description": "Sends blob data to individual peer.\n- This sends the {{#crossLink \"Skylink/WRQ:event\"}}WRQ{{/crossLink}}\n  and to initiate the TFTP protocol.",
            "itemtype": "method",
            "name": "_sendBlobDataToPeer",
            "params": [
                {
                    "name": "data",
                    "description": "The blob data to be sent over.",
                    "type": "Blob",
                    "props": [
                        {
                            "name": "target",
                            "description": "Real peerId to send data to, in case MCU is used.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "dataInfo",
                    "description": "The data information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "transferId",
                            "description": "transferId of the data.",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "Data name.",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "Data timeout to wait for packets.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "60"
                        },
                        {
                            "name": "size",
                            "description": "Data size",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "targetPeerId",
                    "description": "PeerId targeted to receive data.\n  Leave blank to send to all peers.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isPrivate",
                    "description": "If the file transfer is private",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 361,
            "description": "Handles all datachannel protocol events.",
            "itemtype": "method",
            "name": "_dataChannelProtocolHandler",
            "params": [
                {
                    "name": "data",
                    "description": "The data received from datachannel.",
                    "type": "String|Object"
                },
                {
                    "name": "peerId",
                    "description": "The peerId of the peer that sent the data.",
                    "type": "String"
                },
                {
                    "name": "channelName",
                    "description": "The datachannel name.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 406,
            "description": "The user receives a blob request.\nFrom here, it's up to the user to accept or reject it",
            "itemtype": "method",
            "name": "_WRQProtocolHandler",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the request.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from datachannel.\n  [Rel: Skylink._DC_PROTOCOL_TYPE.WRQ.data]",
                    "type": "JSON"
                },
                {
                    "name": "channelName",
                    "description": "The datachannel name.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 445,
            "description": "The user receives an acknowledge of the blob request.",
            "itemtype": "method",
            "name": "_ACKProtocolHandler",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the acknowledgement.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from datachannel.\n  [Rel: Skylink._DC_PROTOCOL_TYPE.ACK.data]",
                    "type": "JSON"
                },
                {
                    "name": "channelName",
                    "description": "The datachannel name.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 502,
            "description": "The user receives a datachannel broadcast message.",
            "itemtype": "method",
            "name": "_MESSAGEProtocolHandler",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending a broadcast message.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from datachannel.\n  [Rel: Skylink._DC_PROTOCOL_TYPE.MESSAGE.data]",
                    "type": "JSON"
                },
                {
                    "name": "channelName",
                    "description": "The datachannel name.",
                    "type": "String"
                }
            ],
            "trigger": "incomingMessage",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 527,
            "description": "The user receives a timeout error.",
            "itemtype": "method",
            "name": "_ERRORProtocolHandler",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the error.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from datachannel.\n  [Rel: Skylink._DC_PROTOCOL_TYPE.ERROR.data]",
                    "type": "Array"
                },
                {
                    "name": "channelName",
                    "description": "The datachannel name.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 555,
            "description": "The user receives a timeout error.",
            "itemtype": "method",
            "name": "_CANCELProtocolHandler",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the error.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from datachannel.\n  [Rel: Skylink._DC_PROTOCOL_TYPE.CANCEL.data]",
                    "type": "Array"
                },
                {
                    "name": "channelName",
                    "description": "The datachannel name.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 584,
            "description": "This is when the data is sent from the sender to the receiving user.",
            "itemtype": "method",
            "name": "_DATAProtocolHandler",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the data.",
                    "type": "String"
                },
                {
                    "name": "dataString",
                    "description": "The data received.\n  [Rel: Skylink._DC_PROTOCOL_TYPE.DATA.data]",
                    "type": "ArrayBuffer|Blob|String"
                },
                {
                    "name": "dataType",
                    "description": "The data type received from datachannel.\n  [Rel: Skylink.DATA_TRANSFER_DATA_TYPE]",
                    "type": "String"
                },
                {
                    "name": "channelName",
                    "description": "The datachannel name.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 676,
            "description": "Start a public or private data transfer with peer(s).\n- Note that peers have the option to accept or reject the receiving data.\n- This method is ideal for sending files.\n- To send a private file to a peer, input the peer Id after the\n  data information.\n- The data transferred is encrypted.",
            "itemtype": "method",
            "name": "sendBlobData",
            "params": [
                {
                    "name": "data",
                    "description": "The data to be sent over. Data has to be a blob.",
                    "type": "Object"
                },
                {
                    "name": "dataInfo",
                    "description": "Information required about the data transferred",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "Data name (name of the file for example).",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "The time (in second) before the transfer\nrequest is cancelled if not answered.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "60"
                        },
                        {
                            "name": "size",
                            "description": "The data size (in octet)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "targetPeerId",
                    "description": "PeerId targeted to receive data.\n  Leave blank to send to all peers.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback fired after data was uploaded.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n  // Example 1: Send file to all peers connected\n  SkylinkDemo.sendBlobData(file, 67);\n\n  // Example 2: Send file to individual peer\n  SkylinkDemo.sendBlobData(blob, 87, targetPeerId);\n\n  // Example 3: Send file with callback\n  SkylinkDemo.sendBlobData(data,{\n     name: data.name,\n     size: data.size\n   },function(error, success){\n    if (error){\n      console.log('Error happened. Can not send file'));\n    }\n    else{\n      console.log('Successfully uploaded file');\n    }\n  });"
            ],
            "trigger": "dataTransferState",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 844,
            "description": "User's response to accept or reject data transfer request from another user.",
            "itemtype": "method",
            "name": "respondBlobRequest",
            "params": [
                {
                    "name": "peerId",
                    "description": "Id of the peer who sent the request.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "accept",
                    "description": "Accept answer.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "dataTransferState",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 881,
            "description": "Reject file transfer for cancel.",
            "itemtype": "method",
            "name": "cancelBlobTransfer",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is expected to receive\n  the request response.",
                    "type": "String"
                },
                {
                    "name": "transferType",
                    "description": "Transfer type [Rel: Skylink.DATA_TRANSFER_TYPE]",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 917,
            "description": "Send a message using the DataChannel provided by Webrtc.\n- Can choose between broadcasting to the room (public message) and send\n  to a specific peer (private message)\n- Content of the message is automatically encrypted during the transfer\n- This is ideal for sending strings or json objects lesser than 16KB\n  [as noted in here](http://www.webrtc.org/chrome).\n- For huge data, please check out function\n  {{#crossLink \"Skylink/sendBlobData:method\"}}sendBlobData(){{/crossLink}}.\n- <b><i>WARNING</i></b>: Map arrays data would be lost when stringified\n  in JSON, so refrain from using map arrays.",
            "itemtype": "method",
            "name": "sendP2PMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message data to send.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "Provide if you want to send to\n  only one peer",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send to all peers\n  SkylinkDemo.sendP2PMessage('Hi there! This is from a DataChannel!');\n\n  // Example 2: Send to specific peer\n  SkylinkDemo.sendP2PMessage('Hi there peer! This is from a DataChannel!', targetPeerId);"
            ],
            "trigger": "incomingMessage",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 1,
            "description": "Internal array of peer ice candidates queue.",
            "itemtype": "attribute",
            "name": "_peerCandidatesQueue",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 12,
            "description": "The list of ICE candidate generation states.\n- Check out the [w3 specification documentation](http://dev.w3.org/2011/\n  webrtc/editor/webrtc.html#rtcicegatheringstate-enum).\n- This is RTCIceGatheringState of the peer.\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "CANDIDATE_GENERATION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "NEW",
                    "description": "The object was just created, and no networking\n  has occurred yet.",
                    "type": "String"
                },
                {
                    "name": "GATHERING",
                    "description": "The ICE engine is in the process of gathering\n  candidates for this RTCPeerConnection.",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "The ICE engine has completed gathering. Events\n  such as adding a new interface or a new TURN server will cause the\n  state to go back to gathering.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 37,
            "description": "A candidate has just been generated (ICE gathering) and will be sent to the peer.\nPart of connection establishment.",
            "itemtype": "method",
            "name": "_onIceCandidate",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The peerId of the target peer.",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "This is provided directly by the peerconnection API.",
                    "type": "Event"
                }
            ],
            "trigger": "candidateGenerationState",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 84,
            "description": "Adds ice candidate to queue.",
            "itemtype": "method",
            "name": "_addIceCandidateToQueue",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The peerId of the target peer.",
                    "type": "String"
                },
                {
                    "name": "candidate",
                    "description": "The ice candidate object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 101,
            "description": "Adds all ice candidate from the queue.",
            "itemtype": "method",
            "name": "_addIceCandidateFromQueue",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The peerId of the target peer.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 1,
            "description": "The list of ICE connection states.\n- Check out the [w3 specification documentation](http://dev.w3.org/2011/\n  webrtc/editor/webrtc.html#rtciceconnectionstate-enum).\n- This is the RTCIceConnection state of the peer.\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "ICE_CONNECTION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "STARTING",
                    "description": "The ICE agent is gathering addresses\n  and/or waiting for remote candidates to be supplied.",
                    "type": "String"
                },
                {
                    "name": "CHECKING",
                    "description": "The ICE agent has received remote candidates\n  on at least one component, and is checking candidate pairs but has\n  not yet found a connection. In addition to checking, it may also\n  still be gathering.",
                    "type": "String"
                },
                {
                    "name": "CONNECTED",
                    "description": "The ICE agent has found a usable connection\n  for all components but is still checking other candidate pairs to see\n  if there is a better connection. It may also still be gathering.",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "The ICE agent has finished gathering and\n  checking and found a connection for all components.",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "The ICE agent is finished checking all\n  candidate pairs and failed to find a connection for at least one\n  component.",
                    "type": "String"
                },
                {
                    "name": "DISCONNECTED",
                    "description": "Liveness checks have failed for one or\n  more components. This is more aggressive than \"failed\", and may\n  trigger intermittently (and resolve itself without action) on\n  a flaky network.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The ICE agent has shut down and is no\n  longer responding to STUN requests.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 43,
            "description": "The list of available TURN server protocols.\n- The available protocols are:",
            "itemtype": "attribute",
            "name": "TURN_TRANSPORT",
            "type": "JSON",
            "params": [
                {
                    "name": "TCP",
                    "description": "Use only TCP transport option.",
                    "type": "String"
                },
                {
                    "name": "UDP",
                    "description": "Use only UDP transport option.",
                    "type": "String"
                },
                {
                    "name": "ANY",
                    "description": "Use both TCP and UDP transport option.",
                    "type": "String"
                },
                {
                    "name": "NONE",
                    "description": "Set no transport option in TURN servers",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 63,
            "description": "The current state if ICE trickle is enabled.",
            "itemtype": "attribute",
            "name": "_enableIceTrickle",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 75,
            "description": "The current state if STUN servers are enabled.",
            "itemtype": "attribute",
            "name": "_enableSTUN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 86,
            "description": "The current state if TURN servers are enabled.",
            "itemtype": "attribute",
            "name": "_enableTURN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 97,
            "description": "SSL option for STUN servers.",
            "itemtype": "attribute",
            "name": "_STUNSSL",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "development": "true",
            "unsupported": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 111,
            "description": "SSL option for TURN servers.",
            "itemtype": "attribute",
            "name": "_TURNSSL",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "development": "true",
            "unsupported": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 125,
            "description": "The transport protocol for TURN servers.",
            "itemtype": "attribute",
            "name": "_TURNTransport",
            "type": "String",
            "default": "Skylink.TURN_TRANSPORT.ANY",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 137,
            "description": "Sets the STUN server specially for Firefox for ICE Connection.",
            "itemtype": "method",
            "name": "_setFirefoxIceServers",
            "params": [
                {
                    "name": "config",
                    "description": "Ice configuration servers url object.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "Updated configuration",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 177,
            "description": "Sets the STUN server specially for Firefox for ICE Connection.",
            "itemtype": "method",
            "name": "_setIceServers",
            "params": [
                {
                    "name": "config",
                    "description": "Ice configuration servers url object.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "Updated configuration",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1,
            "description": "The list of peer connection states.\n- Check out the [w3 specification documentation](http://dev.w3.org/2011/\n  webrtc/editor/webrtc.html#rtcpeerstate-enum).\n- This is the RTCSignalingState of the peer.\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "PEER_CONNECTION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "STABLE",
                    "description": "There is no offer/answer exchange in progress.\n  This is also the initial state in which case the local and remote\n  descriptions are empty.",
                    "type": "String"
                },
                {
                    "name": "HAVE_LOCAL_OFFER",
                    "description": "A local description, of type \"offer\",\n  has been successfully applied.",
                    "type": "String"
                },
                {
                    "name": "HAVE_REMOTE_OFFER",
                    "description": "A remote description, of type \"offer\",\n  has been successfully applied.",
                    "type": "String"
                },
                {
                    "name": "HAVE_LOCAL_PRANSWER",
                    "description": "A remote description of type \"offer\"\n  has been successfully applied and a local description of type \"pranswer\"\n  has been successfully applied.",
                    "type": "String"
                },
                {
                    "name": "HAVE_REMOTE_PRANSWER",
                    "description": "A local description of type \"offer\"\n  has been successfully applied and a remote description of type\n  \"pranswer\" has been successfully applied.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The connection is closed.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 36,
            "description": "Internal array of peer connections.",
            "itemtype": "attribute",
            "name": "_peerConnections",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 47,
            "description": "We have a peer, this creates a peerconnection object to handle the call.\nif we are the initiator, we then starts the O/A handshake.",
            "itemtype": "method",
            "name": "_addPeer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer we should connect to.",
                    "type": "String"
                },
                {
                    "name": "peerBrowser",
                    "description": "The peer browser information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The peer browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The peer browser version.",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "toOffer",
                    "description": "Whether we should start the O/A or wait.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "restartConn",
                    "description": "Whether connection is restarted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "receiveOnly",
                    "description": "Should they only receive?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 90,
            "description": "Restarts a peer connection by sending a RESTART message to signaling server.",
            "itemtype": "method",
            "name": "_restartPeerConnection",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer to restart connection with.",
                    "type": "String"
                },
                {
                    "name": "isSelfInitiateRestart",
                    "description": "If it's self who initiated the restart.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 168,
            "description": "Actually clean the peerconnection and trigger an event.\nCan be called by {{#crossLink \"Skylink/_byeHandler:method\"}}_byeHandler{{/crossLink}}\nand {{#crossLink \"Skylink/leaveRoom:method\"}}leaveRoom{{/crossLink}}.",
            "itemtype": "method",
            "name": "_removePeer",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that has left.",
                    "type": "String"
                }
            ],
            "trigger": "peerLeft",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 206,
            "description": "Creates a peerconnection to communicate with the peer whose ID is 'targetMid'.\nAll the peerconnection callbacks are set up here. This is a quite central piece.",
            "itemtype": "method",
            "name": "_createPeerConnection",
            "params": [
                {
                    "name": "targetMid",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The created peer connection object.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 269,
            "description": "// resend if failed\nif (iceConnectionState === self.ICE_CONNECTION_STATE.FAILED) {\n  log.debug([targetMid, 'RTCIceConnectionState', null,\n    'Ice connection state failed. Re-negotiating connection']);\n  self._removePeer(targetMid);\n  self._sendChannelMessage({\n    type: self._SIG_MESSAGE_TYPE.WELCOME,\n    mid: self._user.sid,\n    rid: self._room.id,\n    agent: window.webrtcDetectedBrowser,\n    version: window.webrtcDetectedVersion,\n    userInfo: self.getPeerInfo(),\n    target: targetMid,\n    restartNego: true,\n    hsPriority: -1\n  });",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 305,
            "description": "If a connection exist with the specified peer connection it closes it and\n restart a fresh peer connection.\n- Please be noted that a peer connection will be refreshed automatically if\n  user fails to establish a stable connection with peer initially.",
            "itemtype": "method",
            "name": "refreshConnection",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Id of the peer whose connection you wish to refresh.",
                    "type": "String",
                    "optional": true
                }
            ],
            "triggers": "peerRestart",
            "example": [
                "\n  SkylinkDemo.on('iceConnectionState', function (state, peerId)) {\n    if (iceConnectionState === SkylinkDemo.ICE_CONNECTION_STATE.FAILED) {\n      // Do a refresh\n      SkylinkDemo.refreshConnection(peerId);\n    }\n  });"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 1,
            "description": "Internal array of peer informations.",
            "itemtype": "attribute",
            "name": "_peerInformations",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 12,
            "description": "User information, credential and the local stream(s).",
            "itemtype": "attribute",
            "name": "_user",
            "type": "JSON",
            "params": [
                {
                    "name": "uid",
                    "description": "The user's session id.",
                    "type": "String"
                },
                {
                    "name": "sid",
                    "description": "The user's secret id. This is the id used as the peerId.",
                    "type": "String"
                },
                {
                    "name": "timestamp",
                    "description": "The user's timestamp.",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The user's access token.",
                    "type": "String"
                }
            ],
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 27,
            "description": "User's custom data set.",
            "itemtype": "attribute",
            "name": "_userData",
            "type": "JSON|String",
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 38,
            "description": "Update/Set the user custom data. This Data can be a simple string or a JSON data.\nIt is let to user choice to decide how this information must be handled.\nThe Skylink demos provided use this parameter as a string for displaying user name.\n- Please note that the custom data would be totally overwritten.\n- If you want to modify only some data, please call\n  {{#crossLink \"Skylink/getUserData:method\"}}getUserData(){{/crossLink}}\n  and then modify the information you want individually.\n- {{#crossLink \"Skylink/peerUpdated:event\"}}peerUpdated{{/crossLink}}\n  event fires only if <b>setUserData()</b> is called after\n  joining a room.",
            "itemtype": "method",
            "name": "setUserData",
            "params": [
                {
                    "name": "userData",
                    "description": "User custom data.",
                    "type": "JSON|String"
                }
            ],
            "example": [
                "\n  // Example 1: Intial way of setting data before user joins the room\n  SkylinkDemo.setUserData({\n    displayName: 'Bobby Rays',\n    fbUserId: '1234'\n  });\n\n // Example 2: Way of setting data after user joins the room\n  var userData = SkylinkDemo.getUserData();\n  userData.displayName = 'New Name';\n  userData.fbUserId = '1234';\n  SkylinkDemo.setUserData(userData);"
            ],
            "trigger": "peerUpdated",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 96,
            "description": "Gets the user custom data.\nSee {{#crossLink \"Skylink/setUserData:method\"}}setUserData(){{/crossLink}}\n  for more information",
            "itemtype": "method",
            "name": "getUserData",
            "return": {
                "description": "User custom data.",
                "type": "JSON|String"
            },
            "example": [
                "\n  var userInfo = SkylinkDemo.getUserData();"
            ],
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 111,
            "description": "Gets the peer information (media settings,media status and personnal data set by the peer).",
            "itemtype": "method",
            "name": "_parseUserData",
            "params": [
                {
                    "name": "userData",
                    "description": "User custom data.",
                    "type": "JSON",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 125,
            "description": "Gets the peer information.\n- If input peerId is user's id or empty, <b>getPeerInfo()</b>\n  would return user's peer information.",
            "itemtype": "method",
            "name": "getPeerInfo",
            "params": [
                {
                    "name": "peerId",
                    "description": "Id of the peer retrieve we want to retrieve the information.\nIf no id is set, <b>getPeerInfo()</b> returns self peer information.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Peer information:\n  - settings {JSON}: User stream settings.\n    - audio {Boolean|JSON}: User audio settings.\n      - stereo {Boolean} : User has enabled stereo or not.\n    - video {Boolean|JSON}: User video settings.\n      - resolution {Boolean|JSON}: User video\n    resolution set. [Rel: Skylink.VIDEO_RESOLUTION]\n        - width {Integer}: User video resolution width.\n        - height {Integer}:User video resolution height.\n    - frameRate {Integer}: User video minimum\n    frame rate.\n  - mediaStatus {JSON}: User MediaStream(s) status.\n    - audioMuted {Boolean}: Is user's audio muted.\n    - videoMuted {Boolean}: Is user's vide muted.\n  - userData {String|JSON}: User's custom data set.See\n  {{#crossLink \"Skylink/setUserData:method\"}}setUserData(){{/crossLink}}\n  for more information\n\nIf peerId doesn't exist return 'null'.",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: To get other peer's information\n  var peerInfo = SkylinkDemo.getPeerInfo(peerId);\n\n  // Example 2: To get own information\n  var userInfo = SkylinkDemo.getPeerInfo();"
            ],
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 1,
            "description": "The list of handshake progress steps.\n- This are the list of steps for the Skylink peer connection.\n- The steps that would occur are:",
            "type": "JSON",
            "itemtype": "attribute",
            "name": "HANDSHAKE_PROGRESS",
            "params": [
                {
                    "name": "ENTER",
                    "description": "Step 1. Received \"enter\" from peer.",
                    "type": "String"
                },
                {
                    "name": "WELCOME",
                    "description": "Step 2. Received \"welcome\" from peer.",
                    "type": "String"
                },
                {
                    "name": "OFFER",
                    "description": "Step 3. Received \"offer\" from peer.",
                    "type": "String"
                },
                {
                    "name": "ANSWER",
                    "description": "Step 4. Received \"answer\" from peer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Error state.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 24,
            "description": "Internal array of peer connection timeouts.\n- The default 1 minute for health timeout.",
            "itemtype": "attribute",
            "name": "_peerConnectionHealthTimers",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 35,
            "description": "Internal array of peer connection that is stable.",
            "itemtype": "attribute",
            "name": "_peerConnectionHealth",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 45,
            "description": "Internal array of peer handshake messaging priorities.",
            "itemtype": "attribute",
            "name": "_peerHSPriorities",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 56,
            "description": "It then sends it to the peer. Handshake step 3 (offer) or 4 (answer).",
            "itemtype": "method",
            "name": "_doOffer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send offer to.",
                    "type": "String"
                },
                {
                    "name": "peerBrowser",
                    "description": "The peer browser information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The peer browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The peer browser version.",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 117,
            "description": "We have succesfully received an offer and set it locally. This function will take care\nof cerating and sendng the corresponding answer. Handshake step 4.",
            "itemtype": "method",
            "name": "_doAnswer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send answer to.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 147,
            "description": "Starts a peer connection health check.\nThe health timers waits for connection, and within 1m if there is not connection,\nit attempts a reconnection.",
            "itemtype": "method",
            "name": "_startPeerConnectionHealthCheck",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to set a connection timeout if connection failed.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 185,
            "description": "Stops a peer connection health check.",
            "itemtype": "method",
            "name": "_stopPeerConnectionHealthCheck",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to clear the checking.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 208,
            "description": "This takes an offer or an aswer generated locally and set it in the peerconnection\nit then sends it to the peer. Handshake step 3 (offer) or 4 (answer).",
            "itemtype": "method",
            "name": "_setLocalAndSendMessage",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send offer/answer to.",
                    "type": "String"
                },
                {
                    "name": "sessionDescription",
                    "description": "This should be provided by the peerconnection API.\n  User might 'tamper' with it, but then , the setLocal may fail.",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 1,
            "description": "The list of signaling actions received.\n- These are usually received from the signaling server to warn the user.\n- The system action outcomes are:",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION",
            "type": "JSON",
            "params": [
                {
                    "name": "WARNING",
                    "description": "Server is warning user to take actions.",
                    "type": "String"
                },
                {
                    "name": "REJECT",
                    "description": "Server has rejected user from room.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 18,
            "description": "The list of signaling actions received.\n- These are usually received from the signaling server to warn the user.\n- The system action outcomes are:",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION_REASON",
            "type": "JSON",
            "params": [
                {
                    "name": "FAST_MESSAGE",
                    "description": "User sends quick messages\n  less than a second resulting in a warning. Continuous\n  quick messages results in user being kicked out of the room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_LOCKED",
                    "description": "Room is locked and user is locked\n  from joining the room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_FULL",
                    "description": "Persistent meeting. Room is full.",
                    "type": "String"
                },
                {
                    "name": "DUPLICATED_LOGIN",
                    "description": "User has same id",
                    "type": "String"
                },
                {
                    "name": "SERVER_ERROR",
                    "description": "Server has an error",
                    "type": "String"
                },
                {
                    "name": "VERIFICATION",
                    "description": "Verification for roomID",
                    "type": "String"
                },
                {
                    "name": "EXPIRED",
                    "description": "Persistent meeting. Room has\n  expired and user is unable to join the room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSED",
                    "description": "Persistent meeting. Room\n  has expired and is closed, user to leave the room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSING",
                    "description": "Persistent meeting.\n  Room is closing soon.",
                    "type": "String"
                },
                {
                    "name": "OVER_SEAT_LIMIT",
                    "description": "Seat limit is hit. API Key\n  do not have sufficient seats to continue.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 58,
            "description": "The room that the user is currently connected to.",
            "itemtype": "attribute",
            "name": "_selectedRoom",
            "type": "String",
            "default": "Skylink._defaultRoom",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 69,
            "description": "Indicates whether room is currently locked.",
            "itemtype": "attribute",
            "name": "_roomLocked",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 79,
            "description": "Once we have initiated Skylink object we can join a room. Calling this\nfunction while you are already connected will cause you to leave the current room\nand connect you to the new room.\n- By joining a room you decide to give or not access rights for your video and audio source.\nIt is not possible to give higher rights once you already joined the room.\n- You may call {{#crossLink \"Skylink/getUserMedia:method\"}}\n  getUserMedia(){{/crossLink}} first if you want to get\n  MediaStream and join the room later.\n- If <b>joinRoom()</b> parameters are empty, it uses\n  any previous media or user data settings if possible (default\n  values otherwise).\n- If no room is specified, user would be joining the default room.",
            "itemtype": "method",
            "name": "joinRoom",
            "params": [
                {
                    "name": "room",
                    "description": "Room name to join.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "init.options.defaultRoom"
                },
                {
                    "name": "options",
                    "description": "Media Constraints",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data. See\n{{#crossLink \"Skylink/setUserData:method\"}}setUserData(){{/crossLink}}\n  for more information",
                            "type": "JSON|String",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "Enable audio stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Enable video stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream frameRate.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Stream bandwidth settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio stream bandwidth in kbps.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "video",
                                    "description": "Video stream bandwidth in kbps.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "256"
                                },
                                {
                                    "name": "data",
                                    "description": "Data stream bandwidth in kbps.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "1638400"
                                }
                            ]
                        },
                        {
                            "name": "manualGetUserMedia",
                            "description": "Get the user media manually.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after peer leaves the room.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // To just join the default room without any video or audio\n  // Note that calling joinRoom without any parameters\n  // still sends any available existing MediaStreams allowed.\n  // See Examples 2, 3, 4 and 5 etc to prevent video or audio stream\n  SkylinkDemo.joinRoom();\n\n  // To just join the default room with bandwidth settings\n  SkylinkDemo.joinRoom({\n    'bandwidth': {\n      'data': 14440\n    }\n  });\n\n  // Example 1: To call getUserMedia and joinRoom seperately\n  SkylinkDemo.getUserMedia();\n  SkylinkDemo.on('mediaAccessSuccess', function (stream)) {\n    attachMediaStream($('.localVideo')[0], stream);\n    SkylinkDemo.joinRoom();\n  });\n\n  // Example 2: Join a room without any video or audio\n  SkylinkDemo.joinRoom('room');\n\n  // Example 3: Join a room with audio only\n  SkylinkDemo.joinRoom('room', {\n    'audio' : true,\n    'video' : false\n  });\n\n  // Example 4: Join a room with prefixed video width and height settings\n  SkylinkDemo.joinRoom('room', {\n    'audio' : true,\n    'video' : {\n      'resolution' : {\n        'width' : 640,\n        'height' : 320\n      }\n    }\n  });\n\n  // Example 5: Join a room with userData and settings with audio, video\n  // and bandwidth\n  SkylinkDemo.joinRoom({\n    'userData': {\n      'item1': 'My custom data',\n      'item2': 'Put whatever, string or JSON or array'\n    },\n    'audio' : {\n       'stereo' : true\n     },\n    'video' : {\n       'res' : SkylinkDemo.VIDEO_RESOLUTION.VGA,\n       'frameRate' : 50\n    },\n    'bandwidth' : {\n       'audio' : 48,\n       'video' : 256,\n       'data' : 14480\n     }\n  });\n\n  //Example 6: joinRoom with callback\n  SkylinkDemo.joinRoom(function(error, success){\n    if (error){\n      console.log('Error happened. Can not join room'));\n    }\n    else{\n      console.log('Successfully joined room');\n    }\n  });"
            ],
            "trigger": "peerJoined, mediaAccessRequired",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 265,
            "description": "Wait for room to ready, then wait for socket signaling channel to open.\n- If channel is not opened before then open it.\n- Once channel is opened, wait for media stream and send a join room request to signaling server.",
            "itemtype": "method",
            "name": "_waitForOpenChannel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data.",
                            "type": "JSON|String",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "This call requires audio stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Stream bandwidth settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio stream bandwidth in kbps.\n  Recommended: 50 kbps.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video",
                                    "description": "Video stream bandwidth in kbps.\n  Recommended: 256 kbps.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "Data stream bandwidth in kbps.\n  Recommended: 1638400 kbps.",
                                    "type": "Integer",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "peerJoined, incomingStream, mediaAccessRequired",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 342,
            "description": "User to leave the room.",
            "itemtype": "method",
            "name": "leaveRoom",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback fired after peer leaves the room.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  //Example 1: Just leaveRoom\n  SkylinkDemo.leaveRoom();\n\n  //Example 2: leaveRoom with callback\n  SkylinkDemo.leaveRoom(function(error, success){\n    if (error){\n      console.log('Error happened'));\n    }\n    else{\n      console.log('Successfully left room');\n    }\n  });"
            ],
            "trigger": "peerLeft, channelClose",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 404,
            "description": "Lock the room to prevent other users from joining the room.",
            "itemtype": "method",
            "name": "lockRoom",
            "example": [
                "\n  SkylinkDemo.lockRoom();"
            ],
            "trigger": "lockRoom",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 425,
            "description": "Unlock the room to allow other users to join the room.",
            "itemtype": "method",
            "name": "unlockRoom",
            "example": [
                "\n  SkylinkDemo.unlockRoom();"
            ],
            "trigger": "lockRoom",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1,
            "description": "The list of api server data retrieval state.\n- These are the states to inform the state of retrieving the\n  information from the api server required to start the peer\n  connection or if the browser is eligible to start the peer connection.\n- This is the first event that would fired, because Skylink would retrieve\n  information from the api server that is required to start the connection.\n- Once the state is <u>COMPLETED</u>, Skylink is ready to start the call.\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE",
            "type": "JSON",
            "params": [
                {
                    "name": "INIT",
                    "description": "Skylink has just started. No information are\n  retrieved yet.",
                    "type": "Integer"
                },
                {
                    "name": "LOADING",
                    "description": "Skylink is starting the retrieval of the\n  connection information.",
                    "type": "Integer"
                },
                {
                    "name": "COMPLETED",
                    "description": "Skylink has completed retrieving the\n  connection.",
                    "type": "Integer"
                },
                {
                    "name": "ERROR",
                    "description": "Skylink has occurred an error when\n  retrieving the connection information.",
                    "type": "Integer"
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 31,
            "description": "The list of ready state change errors.\n- These are the error states from the error object error code.\n- <b>ROOM_LOCKED</b> is deprecated in 0.5.2. Please use\n  {{#crossLink \"Skylink/:attr\"}}leaveRoom(){{/crossLink}}\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE_ERROR",
            "type": "JSON",
            "params": [
                {
                    "name": "API_INVALID",
                    "description": "Api Key provided does not exist.",
                    "type": "Integer"
                },
                {
                    "name": "API_DOMAIN_NOT_MATCH",
                    "description": "Api Key used in domain does\n  not match.",
                    "type": "Integer"
                },
                {
                    "name": "API_CORS_DOMAIN_NOT_MATCH",
                    "description": "Api Key used in CORS\n  domain does not match.",
                    "type": "Integer"
                },
                {
                    "name": "API_CREDENTIALS_INVALID",
                    "description": "Api Key credentials does\n  not exist.",
                    "type": "Integer"
                },
                {
                    "name": "API_CREDENTIALS_NOT_MATCH",
                    "description": "Api Key credentials does not\n  match what is expected.",
                    "type": "Integer"
                },
                {
                    "name": "API_INVALID_PARENT_KEY",
                    "description": "Api Key does not have a parent\n  key nor is a root key.",
                    "type": "Integer"
                },
                {
                    "name": "API_NOT_ENOUGH_CREDIT",
                    "description": "Api Key does not have enough\n  credits to use.",
                    "type": "Integer"
                },
                {
                    "name": "API_NOT_ENOUGH_PREPAID_CREDIT",
                    "description": "Api Key does not have\n  enough prepaid credits to use.",
                    "type": "Integer"
                },
                {
                    "name": "API_FAILED_FINDING_PREPAID_CREDIT",
                    "description": "Api Key preapid\n  payments does not exist.",
                    "type": "Integer"
                },
                {
                    "name": "API_NO_MEETING_RECORD_FOUND",
                    "description": "Api Key does not have a\n  meeting record at this timing. This occurs when Api Key is a\n  static one.",
                    "type": "Integer"
                },
                {
                    "name": "ROOM_LOCKED",
                    "description": "Room is locked.",
                    "type": "Integer"
                },
                {
                    "name": "NO_SOCKET_IO",
                    "description": "No socket.io dependency is loaded to use.",
                    "type": "Integer"
                },
                {
                    "name": "NO_XMLHTTPREQUEST_SUPPORT",
                    "description": "Browser does not support\n  XMLHttpRequest to use.",
                    "type": "Integer"
                },
                {
                    "name": "NO_WEBRTC_SUPPORT",
                    "description": "Browser does not have WebRTC support.",
                    "type": "Integer"
                },
                {
                    "name": "NO_PATH",
                    "description": "No path is loaded yet.",
                    "type": "Integer"
                },
                {
                    "name": "INVALID_XMLHTTPREQUEST_STATUS",
                    "description": "Invalid XMLHttpRequest\n  when retrieving information.",
                    "type": "Integer"
                }
            ],
            "readonly": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 91,
            "description": "The list of available regional servers.\n- This is for developers to set the nearest region server\n  for Skylink to connect to for faster connectivity.\n- The available regional servers are:",
            "itemtype": "attribute",
            "name": "REGIONAL_SERVER",
            "type": "JSON",
            "params": [
                {
                    "name": "APAC1",
                    "description": "Asia pacific server 1.",
                    "type": "String"
                },
                {
                    "name": "US1",
                    "description": "server 1.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 109,
            "description": "Force an SSL connection to signalling and API server.",
            "itemtype": "attribute",
            "name": "_forceSSL",
            "type": "Boolean",
            "default": "false",
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 121,
            "description": "The path that user is currently connect to.\n- NOTE ALEX: check if last char is '/'",
            "itemtype": "attribute",
            "name": "_path",
            "type": "String",
            "default": "Skylink._serverPath",
            "final": 1,
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 135,
            "description": "The regional server that Skylink connects to.",
            "itemtype": "attribute",
            "name": "_serverRegion",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 145,
            "description": "The server that user connects to to make\napi calls to.\n- The reason why users can input this value is to give\n  users the chance to connect to any of our beta servers\n  if available instead of the stable version.",
            "itemtype": "attribute",
            "name": "_roomServer",
            "type": "String",
            "default": "'//api.temasys.com.sg'",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 160,
            "description": "The API Key ID.",
            "itemtype": "attribute",
            "name": "_apiKey",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 170,
            "description": "The default room that the user connects to if no room is provided in\n{{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}.",
            "itemtype": "attribute",
            "name": "_defaultRoom",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 181,
            "description": "The static room's meeting starting date and time.\n- The value is in ISO formatted string.",
            "itemtype": "attribute",
            "name": "_roomStart",
            "type": "String",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 193,
            "description": "The static room's meeting duration.",
            "itemtype": "attribute",
            "name": "_roomDuration",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 204,
            "description": "The credentials required to set the start date and time\nand the duration.",
            "itemtype": "attribute",
            "name": "_roomCredentials",
            "type": "String",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 216,
            "description": "The current Skylink ready state change.\n[Rel: Skylink.READY_STATE_CHANGE]",
            "itemtype": "attribute",
            "name": "_readyState",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 228,
            "description": "The received server key.",
            "itemtype": "attribute",
            "name": "_key",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 238,
            "description": "The owner's username of the apiKey.",
            "itemtype": "attribute",
            "name": "_apiKeyOwner",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 248,
            "description": "The room connection information.",
            "itemtype": "attribute",
            "name": "_room",
            "type": "JSON",
            "params": [
                {
                    "name": "id",
                    "description": "The roomId of the room user is connected to.",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The token of the room user is connected to.",
                    "type": "String"
                },
                {
                    "name": "startDateTime",
                    "description": "The startDateTime in ISO string format of the room.",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The duration of the room.",
                    "type": "String"
                },
                {
                    "name": "connection",
                    "description": "Connection constraints and configuration.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "peerConstraints",
                            "description": "The peerconnection constraints.",
                            "type": "JSON"
                        },
                        {
                            "name": "peerConfig",
                            "description": "The peerconnection configuration.",
                            "type": "JSON"
                        },
                        {
                            "name": "offerConstraints",
                            "description": "The offer constraints.",
                            "type": "JSON"
                        },
                        {
                            "name": "sdpConstraints",
                            "description": "The sdp constraints.",
                            "type": "JSON"
                        }
                    ]
                }
            ],
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 268,
            "description": "Gets information from api server.",
            "itemtype": "method",
            "name": "_requestServerInfo",
            "params": [
                {
                    "name": "method",
                    "description": "The http method.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url to do a rest call.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after Skylink\n  receives a response from the api server.",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "HTTP Params",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 341,
            "description": "Parse the information received from the api server.",
            "itemtype": "method",
            "name": "_parseInfo",
            "params": [
                {
                    "name": "info",
                    "description": "The parsed information from the server.",
                    "type": "JSON"
                }
            ],
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 405,
            "description": "Start the loading of information from the api server.",
            "itemtype": "method",
            "name": "_loadInfo",
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 473,
            "description": "Initialize Skylink to retrieve new connection information based on options.",
            "itemtype": "method",
            "name": "_initSelectedRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to connect to.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "Skylink._defaultRoom"
                },
                {
                    "name": "callback",
                    "description": "The callback fired once Skylink is re-initialized.",
                    "type": "Function"
                }
            ],
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 518,
            "description": "Initialize Skylink to retrieve connection information.\n- <b><i>IMPORTANT</i></b>: Please call this method to load all server\n  information before joining the room or doing anything else.\n- If you would like to set the start time and duration of the room,\n  you have to generate the credentials. In example 3, we use the\n   [CryptoJS](https://code.google.com/p/crypto-js/) library.\n  - Step 1: Generate the hash. It is created by using the roomname,\n    duration and the timestamp (in ISO String format).\n  - Step 2: Generate the Credentials. It is is generated by converting\n    the hash to a Base64 string and then encoding it to a URI string.\n  - Step 3: Initialize Skylink",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "options",
                    "description": "Connection options or API Key ID",
                    "type": "String|JSON",
                    "props": [
                        {
                            "name": "apiKey",
                            "description": "API Key ID to identify with the Temasys\n  backend server",
                            "type": "String"
                        },
                        {
                            "name": "defaultRoom",
                            "description": "The default room to connect\n  to if there is no room provided in\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "roomServer",
                            "description": "Path to the Temasys\n  backend server. If there's no room provided, default room would be used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "region",
                            "description": "The regional server that user\n  chooses to use. [Rel: Skylink.REGIONAL_SERVER]",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The option to enable\n  ICE trickle or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "The option to enable\n  enableDataChannel or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableTURNServer",
                            "description": "To enable TURN servers in ice connection.\n  Please do so at your own risk as it might disrupt the connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableSTUNServer",
                            "description": "To enable STUN servers in ice connection.\n  Please do so at your own risk as it might disrupt the connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "TURNServerTransport",
                            "description": "Transport\n to set the transport packet type. [Rel: Skylink.TURN_TRANSPORT]",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "Skylink.TURN_TRANSPORT.ANY"
                        },
                        {
                            "name": "credentials",
                            "description": "Credentials options for\n  setting a static meeting.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "startDateTime",
                                    "description": "The start timing of the\n  meeting in Date ISO String",
                                    "type": "String"
                                },
                                {
                                    "name": "duration",
                                    "description": "The duration of the meeting",
                                    "type": "Integer"
                                },
                                {
                                    "name": "credentials",
                                    "description": "The credentials required\n  to set the timing and duration of a meeting.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "audioFallback",
                            "description": "To allow the option to fallback to\n  audio if failed retrieving video stream.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "forceSSL",
                            "description": "To force SSL connections to the API server\n  and signaling server.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "socketTimeout",
                            "description": "To set the timeout for socket to fail\n  and attempt a reconnection. The mininum value is 5000.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "20000"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the room was initialized.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Note: Default room is apiKey when no room\n  // Example 1: To initalize without setting any default room.\n  SkylinkDemo.init('apiKey');\n\n  // Example 2: To initialize with apikey, roomServer and defaultRoom\n  SkylinkDemo.init({\n    'apiKey' : 'apiKey',\n    'roomServer' : 'http://xxxx.com',\n    'defaultRoom' : 'mainHangout'\n  });\n\n  // Example 3: To initialize with credentials to set startDateTime and\n  // duration of the room\n  var hash = CryptoJS.HmacSHA1(roomname + '_' + duration + '_' +\n    (new Date()).toISOString(), token);\n  var credentials = encodeURIComponent(hash.toString(CryptoJS.enc.Base64));\n  SkylinkDemo.init({\n    'apiKey' : 'apiKey',\n    'roomServer' : 'http://xxxx.com',\n    'defaultRoom' : 'mainHangout'\n    'credentials' : {\n       'startDateTime' : (new Date()).toISOString(),\n       'duration' : 500,\n       'credentials' : credentials\n    }\n  });\n\n  // Example 4: To initialize with callback\n  SkylinkDemo.init('apiKey',function(error,success){\n    if (error){\n      console.log('Init failed: '+JSON.stringify(error));\n    }\n    else{\n      console.log('Init succeed: '+JSON.stringify(success));\n    }\n  });"
            ],
            "trigger": "readyStateChange",
            "required": 1,
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 1,
            "description": "The log levels.\n- Order from highest to lowest is: error > warn > info > log > debug.\n- A log level displays logs of his level and higher (e.g warn level displays warn and error).",
            "itemtype": "attribute",
            "name": "LOG_LEVEL",
            "type": "JSON",
            "params": [
                {
                    "name": "DEBUG",
                    "description": "Level 5. Shows debug logs.",
                    "type": "Integer"
                },
                {
                    "name": "LOG",
                    "description": "Level 4. Shows normal logs.",
                    "type": "Integer"
                },
                {
                    "name": "INFO",
                    "description": "Level 3. Show informational logs related to user.",
                    "type": "Integer"
                },
                {
                    "name": "WARN",
                    "description": "Level 2. Shows warnings.",
                    "type": "Integer"
                },
                {
                    "name": "ERROR",
                    "description": "Level 1. Shows the errors that are thrown during\n  execution.",
                    "type": "Integer"
                }
            ],
            "readonly": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 25,
            "description": "The log key",
            "itemtype": "attribute",
            "name": "_LOG_KEY",
            "type": "String",
            "scoped": "true",
            "readonly": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 37,
            "description": "The list of level levels based on index.",
            "itemtype": "attribute",
            "name": "_LOG_LEVELS",
            "type": "Array",
            "required": 1,
            "scoped": "true",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 49,
            "description": "The log level of Skylink",
            "itemtype": "attribute",
            "name": "_logLevel",
            "type": "String",
            "default": "Skylink.LOG_LEVEL.ERROR",
            "required": 1,
            "scoped": "true",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 62,
            "description": "The current state if debugging mode is enabled.",
            "itemtype": "attribute",
            "name": "_enableDebugMode",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 75,
            "description": "The current state if debugging mode should store\nthe logs in SkylinkLogs.",
            "itemtype": "attribute",
            "name": "_enableDebugStack",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 89,
            "description": "The current state if debugging mode should\nprint the trace in every log information.",
            "itemtype": "attribute",
            "name": "_enableDebugTrace",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 103,
            "description": "An internal array of logs.",
            "itemtype": "attribute",
            "name": "_storedLogs",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 115,
            "description": "Gets the list of logs",
            "itemtype": "method",
            "name": "_getStoredLogsFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level that get() should return.\n If not provided, it get() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 141,
            "description": "Gets the list of logs",
            "itemtype": "method",
            "name": "_clearAllStoredLogsFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level that get() should return.\n If not provided, it get() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 158,
            "description": "Print out all the store logs in console.",
            "itemtype": "method",
            "name": "_printAllStoredLogsFn",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 183,
            "description": "Handles the list of Skylink logs.",
            "itemtype": "attribute",
            "name": "SkylinkLogs",
            "type": "JSON",
            "required": 1,
            "global": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 193,
            "description": "Gets the list of logs",
            "itemtype": "property",
            "name": "SkylinkLogs.getLogs",
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "type": "Function",
            "required": 1,
            "global": "true",
            "since": "0.5.5",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "logLevel",
                    "description": "The log level that getLogs() should return.\n If not provided, it getLogs() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 208,
            "description": "Clear all the stored logs.",
            "itemtype": "property",
            "name": "SkylinkLogs.clearAllLogs",
            "type": "Function",
            "required": 1,
            "global": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 219,
            "description": "Print out all the store logs in console.",
            "itemtype": "property",
            "name": "SkylinkLogs.printAllLogs",
            "type": "Function",
            "required": 1,
            "global": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 231,
            "description": "Logs all the console information.",
            "itemtype": "method",
            "name": "_logFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The console message.",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the message is targeted to.",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "The interface the message is targeted to.",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The events the message is targeted to.",
                            "type": "String|Array"
                        },
                        {
                            "name": "3:",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "debugObject",
                    "description": "The console parameter string or object.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 307,
            "description": "Logs all the console information.",
            "itemtype": "attribute",
            "name": "log",
            "type": "JSON",
            "params": [
                {
                    "name": "debug",
                    "description": "For debug mode.",
                    "type": "Function"
                },
                {
                    "name": "log",
                    "description": "For log mode.",
                    "type": "Function"
                },
                {
                    "name": "info",
                    "description": "For info mode.",
                    "type": "Function"
                },
                {
                    "name": "warn",
                    "description": "For warn mode.",
                    "type": "Function"
                },
                {
                    "name": "serror",
                    "description": "For error mode.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 323,
            "description": "Outputs a debug log in the console.",
            "itemtype": "property",
            "name": "log.debug",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 346,
            "description": "Outputs a normal log in the console.",
            "itemtype": "property",
            "name": "log.log",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.log('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 369,
            "description": "Outputs an info log in the console.",
            "itemtype": "property",
            "name": "log.info",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 392,
            "description": "Outputs a warning log in the console.",
            "itemtype": "property",
            "name": "log.warn",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('Here\\'s a warning. Please do xxxxx to resolve this issue', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 414,
            "description": "Outputs an error log in the console.",
            "itemtype": "property",
            "name": "log.error",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.\n  // Logging for external information\n  log.error('There has been an error', object);",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 437,
            "description": "Sets the debugging log level. A log level displays logs of his level and higher:\nERROR > WARN > INFO > LOG > DEBUG.\n- The default log level is Skylink.LOG_LEVEL.WARN",
            "itemtype": "method",
            "name": "setLogLevel",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level.[Rel: Skylink.Data.LOG_LEVEL]",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n  //Display logs level: Error, warn, info, log and debug.\n  SkylinkDemo.setLogLevel(SkylinkDemo.LOG_LEVEL.DEBUG);"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 463,
            "description": "Sets Skylink in debugging mode to display log stack trace.\n- By default, debugging mode is turned off.",
            "itemtype": "method",
            "name": "setDebugMode",
            "params": [
                {
                    "name": "options",
                    "description": "Is debugging mode enabled.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "trace",
                            "description": "If console output should trace.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "storeLogs",
                            "description": "If SkylinkLogs should store\n  the output logs.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: just to enable\n  SkylinkDemo.setDebugMode(true);\n  // or\n  SkylinkDemo.setDebugMode();\n\n  // Example 2: just to disable\n  SkylinkDemo.setDebugMode(false);"
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1,
            "description": "Syntactically private variables and utility functions.",
            "itemtype": "attribute",
            "name": "_EVENTS",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 12,
            "description": "Event fired when the socket connection to the signaling\nserver is open.",
            "itemtype": "event",
            "name": "channelOpen",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 21,
            "description": "Event fired when the socket connection to the signaling\nserver has closed.",
            "itemtype": "event",
            "name": "channelClose",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 30,
            "description": "Event fired when the socket connection received a message\nfrom the signaling server.",
            "itemtype": "event",
            "name": "channelMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 40,
            "description": "Event fired when the socket connection has occurred an error.",
            "itemtype": "event",
            "name": "channelError",
            "params": [
                {
                    "name": "error",
                    "description": "Error message or object thrown.",
                    "type": "Object|String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 49,
            "description": "Event fired when the socket re-tries to connection with fallback ports.",
            "itemtype": "event",
            "name": "channelRetry",
            "params": [
                {
                    "name": "fallbackType",
                    "description": "The type of fallback [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                },
                {
                    "name": "currentAttempt",
                    "description": "The current attempt of the fallback re-try attempt.",
                    "type": "Integer"
                }
            ],
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 59,
            "description": "Event fired when the socket connection failed connecting.\n- The difference between this and <b>channelError</b> is that\n  channelError triggers during the connection. This throws\n  when connection failed to be established.",
            "itemtype": "event",
            "name": "socketError",
            "params": [
                {
                    "name": "errorCode",
                    "description": "The error code.\n  [Rel: Skylink.SOCKET_ERROR]",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The reconnection attempt or error object.",
                    "type": "Integer|String|Object"
                },
                {
                    "name": "fallbackType",
                    "description": "The type of fallback [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                }
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 74,
            "description": "Event fired whether the room is ready for use.",
            "itemtype": "event",
            "name": "readyStateChange",
            "params": [
                {
                    "name": "readyState",
                    "description": "[Rel: Skylink.READY_STATE_CHANGE]",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error object thrown.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "status",
                            "description": "Http status when retrieving information.\n  May be empty for other errors.",
                            "type": "Integer"
                        },
                        {
                            "name": "content",
                            "description": "Error message.",
                            "type": "String"
                        },
                        {
                            "name": "errorCode",
                            "description": "Error code.\n  [Rel: Skylink.READY_STATE_CHANGE_ERROR]",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 89,
            "description": "Event fired when a peer's handshake progress has changed.",
            "itemtype": "event",
            "name": "handshakeProgress",
            "params": [
                {
                    "name": "step",
                    "description": "The handshake progress step.\n  [Rel: Skylink.HANDSHAKE_PROGRESS]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer's handshake progress.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error message or object thrown.",
                    "type": "Object|String"
                }
            ],
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 101,
            "description": "Event fired when an ICE gathering state has changed.",
            "itemtype": "event",
            "name": "candidateGenerationState",
            "params": [
                {
                    "name": "state",
                    "description": "The ice candidate generation state.\n  [Rel: Skylink.CANDIDATE_GENERATION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had an ice candidate\n   generation state change.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 113,
            "description": "Event fired when a peer Connection state has changed.",
            "itemtype": "event",
            "name": "peerConnectionState",
            "params": [
                {
                    "name": "state",
                    "description": "The peer connection state.\n  [Rel: Skylink.PEER_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had a peer connection state\n   change.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 125,
            "description": "Event fired when a peer connection health has changed.",
            "itemtype": "event",
            "name": "peerConnectionHealth",
            "params": [
                {
                    "name": "health",
                    "description": "The peer connection health.\n  [Rel: Skylink.PEER_CONNECTION_HEALTH]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had a peer connection health\n   change.",
                    "type": "String"
                }
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 136,
            "description": "Event fired when an ICE connection state has changed.",
            "iceconnectionstate": "",
            "params": [
                {
                    "name": "state",
                    "description": "The ice connection state.\n  [Rel: Skylink.ICE_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had an ice connection state change.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 147,
            "description": "Event fired when webcam or microphone media access fails.",
            "itemtype": "event",
            "name": "mediaAccessError",
            "params": [
                {
                    "name": "error",
                    "description": "Error object thrown.",
                    "type": "Object|String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 156,
            "description": "Event fired when webcam or microphone media acces passes.",
            "itemtype": "event",
            "name": "mediaAccessSuccess",
            "params": [
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 165,
            "description": "Event fired when it's required to have audio or video access.",
            "itemtype": "event",
            "name": "mediaAccessRequired",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 173,
            "description": "Event fired when media access to MediaStream has stopped.",
            "itemtype": "event",
            "name": "mediaAccessStopped",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 181,
            "description": "Event fired when a peer joins the room.",
            "itemtype": "event",
            "name": "peerJoined",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that joined the room.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Integer",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 216,
            "description": "Event fired when a peer's connection is restarted.",
            "itemtype": "event",
            "name": "peerRestart",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is being restarted.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON"
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelfInitiateRestart",
                    "description": "Is it us who initiated the restart.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 250,
            "description": "Event fired when a peer information is updated.",
            "itemtype": "event",
            "name": "peerUpdated",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had information updaed.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Integer",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 285,
            "description": "Event fired when a peer leaves the room",
            "itemtype": "event",
            "name": "peerLeft",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that left.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Integer",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 320,
            "description": "Event fired when a peer joins the room",
            "itemtype": "event",
            "name": "presenceChanged",
            "params": [
                {
                    "name": "users",
                    "description": "The list of users",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "unsupported": "true",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 331,
            "description": "Event fired when a remote stream has become available.\n- This occurs after the user joins the room.\n- This is changed from <b>addPeerStream</b> event.\n- Note that <b>addPeerStream</b> is removed from the specs.\n- There has been a documentation error whereby the stream it is\n  supposed to be (stream, peerId, isSelf), but instead is received\n  as (peerId, stream, isSelf) in 0.5.0.",
            "itemtype": "event",
            "name": "incomingStream",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the stream.",
                    "type": "String"
                },
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "Object"
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON"
                }
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 349,
            "description": "Event fired when a message being broadcasted is received.\n- This is changed from <b>chatMessageReceived</b>,\n  <b>privateMessage</b> and <b>publicMessage</b> event.\n- Note that <b>chatMessageReceived</b>, <b>privateMessage</b>\n  and <b>publicMessage</b> is removed from the specs.",
            "itemtype": "event",
            "name": "incomingMessage",
            "params": [
                {
                    "name": "message",
                    "description": "Message object that is received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "content",
                            "description": "Data that is broadcasted.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender peer.",
                            "type": "String"
                        },
                        {
                            "name": "targetPeerId",
                            "description": "PeerId that is specifically\n  targeted to receive the message.",
                            "type": "String"
                        },
                        {
                            "name": "isPrivate",
                            "description": "Is data received a private message.",
                            "type": "Boolean"
                        },
                        {
                            "name": "isDataChannel",
                            "description": "Is data received from a\n  data channel.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the sender peer.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Integer",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 396,
            "description": "Event fired when connected to a room and the lock status has changed.",
            "itemtype": "event",
            "name": "roomLock",
            "params": [
                {
                    "name": "isLocked",
                    "description": "Is the room locked.",
                    "type": "Boolean"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is locking/unlocking\n  the room.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Integer",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 433,
            "description": "Event fired when a peer's datachannel state has changed.",
            "itemtype": "event",
            "name": "dataChannelState",
            "params": [
                {
                    "name": "state",
                    "description": "The datachannel state.\n  [Rel: Skylink.DATA_CHANNEL_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of peer that has a datachannel\n  state change.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 445,
            "description": "Event fired when a data transfer state has changed.\n- Note that <u>transferInfo.data</u> sends the blob data, and\n  no longer a blob url.",
            "itemtype": "event",
            "name": "dataTransferState",
            "params": [
                {
                    "name": "state",
                    "description": "The data transfer state.\n  [Rel: Skylink.DATA_TRANSFER_STATE]",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "TransferId of the data.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that has a data\n  transfer state change.",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "Data transfer information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "percentage",
                            "description": "The percetange of data being\n  uploaded / downloaded.",
                            "type": "JSON"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender.",
                            "type": "JSON"
                        },
                        {
                            "name": "data",
                            "description": "The blob data. See the\n  [createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL)\n  method on how you can convert the blob to a download link.",
                            "type": "JSON"
                        },
                        {
                            "name": "name",
                            "description": "Data name.",
                            "type": "JSON"
                        },
                        {
                            "name": "size",
                            "description": "Data size.",
                            "type": "JSON"
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "message",
                            "description": "Error message thrown.",
                            "type": "String"
                        },
                        {
                            "name": "transferType",
                            "description": "Is error from uploading or downloading.\n  [Rel: Skylink.DATA_TRANSFER_TYPE]",
                            "type": "String"
                        }
                    ]
                }
            ],
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 473,
            "description": "Event fired when the signaling server warns the user.",
            "itemtype": "event",
            "name": "systemAction",
            "params": [
                {
                    "name": "action",
                    "description": "The action that is required for\n  the user to follow. [Rel: Skylink.SYSTEM_ACTION]",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The reason for the action.",
                    "type": "String"
                },
                {
                    "name": "reason",
                    "description": "The reason why the action is given.\n  [Rel: Skylink.SYSTEM_ACTION_REASON]",
                    "type": "String"
                }
            ],
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 487,
            "description": "Events with callbacks that would be fired only once once condition is met.",
            "itemtype": "attribute",
            "name": "_onceEvents",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 498,
            "description": "Trigger all the callbacks associated with an event.\n- Note that extra arguments can be passed to the callback which\n  extra argument can be expected by callback is documented by each event.",
            "itemtype": "method",
            "name": "_trigger",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 549,
            "description": "To register a callback function to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can register.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n  SkylinkDemo.on('peerJoined', function (peerId, peerInfo) {\n     alert(peerId + ' has joined the room');\n  });"
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 571,
            "description": "To register a callback function to an event that is fired once a condition is met.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can register.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this event.\n  If not provided, it will return true when the event is triggered.\n  Return a true to fire the callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The function does not get removed onced triggered,\n  but triggers everytime the event is called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n  SkylinkDemo.once('peerConnectionState', function (state, peerId) {\n    alert('Peer has left');\n  }, function (state, peerId) {\n    return state === SkylinkDemo.PEER_CONNECTION_STATE.CLOSED;\n  });"
            ],
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 613,
            "description": "To unregister a callback function from an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can unregister.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.\n  Not providing any callback turns all callbacks tied to that event off.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n  SkylinkDemo.off('peerJoined', callback);"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 654,
            "description": "Does a check condition first to check if event is required to be subscribed.\nIf check condition fails, it subscribes an event with\n {{#crossLink \"Skylink/once:method\"}}once(){{/crossLink}} method to wait for\nthe condition to pass to fire the callback.",
            "itemtype": "method",
            "name": "_condition",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the condition is met.",
                    "type": "Function"
                },
                {
                    "name": "checkFirst",
                    "description": "The condition to check that if pass, it would fire the callback,\n  or it will just subscribe to an event and fire when condition is met.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this event.\n  If not provided, it will return true when the event is triggered.\n  Return a true to fire the callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The function does not get removed onced triggered,\n  but triggers everytime the event is called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 693,
            "description": "Sets an interval check. If condition is met, fires callback.",
            "itemtype": "method",
            "name": "_wait",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback fired after the condition is met.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this the callback.",
                    "type": "Function"
                },
                {
                    "name": "intervalTime",
                    "description": "The interval loop timeout.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "50"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 1,
            "description": "The list of channel connection error.\n- The errors that would occur are:",
            "itemtype": "attribute",
            "name": "SOCKET_ERROR",
            "type": "JSON",
            "params": [
                {
                    "name": "CONNECTION_FAILED",
                    "description": "The connection failed. Up to user's\n  defined reconnection attempts to decide on a reconnection.",
                    "type": "Integer"
                },
                {
                    "name": "RECONNECTION_FAILED",
                    "description": "The reconnection failed. Up to user's\n  defined reconnection attempts to decide on another reconnection.",
                    "type": "String"
                },
                {
                    "name": "CONNECTION_ABORTED",
                    "description": "No reconnection specified.\n  Connection is aborted.",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ABORTED",
                    "description": "All reconnection attempts have failed.\n  Reconnection is aborted.",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ATTEMPT",
                    "description": "A reconnection attempt has been fired.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 27,
            "description": "The list of channel connection fallback states.\n- The fallback states that would occur are:",
            "itemtype": "attribute",
            "name": "SOCKET_FALLBACK",
            "type": "JSON",
            "params": [
                {
                    "name": "NON_FALLBACK",
                    "description": "Non-fallback state,",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT",
                    "description": "Fallback to non-ssl port for channel re-try.",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT_SSL",
                    "description": "Fallback to ssl port for channel re-try.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING",
                    "description": "Fallback to non-ssl long-polling.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING_SSL",
                    "description": "Fallback to ssl port for long-polling.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 49,
            "description": "The current socket opened state.",
            "itemtype": "attribute",
            "name": "_channelOpen",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 60,
            "description": "The signaling server to connect to.",
            "itemtype": "attribute",
            "name": "_signalingServer",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 70,
            "description": "The signaling server protocol to use.\n<ul>\n<li><code>https:</code>\n<ul><li>Default port is <code>443</code>.</li>\n    <li>Fallback port is <code>3443</code>.</li>\n</ul></li>\n<li><code>http:</code>\n<ul><li>Default port is <code>80</code>.</li>\n    <li>Fallback port is <code>3000</code>.</li>\n</ul></li>\n</ul>",
            "itemtype": "attribute",
            "name": "_signalingServerProtocol",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 90,
            "description": "The signaling server port to connect to.",
            "itemtype": "attribute",
            "name": "_signalingServerPort",
            "type": "Integer",
            "default": "https: = 443, http = 80",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 102,
            "description": "The actual socket object that handles the connection.",
            "itemtype": "attribute",
            "name": "_socket",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 113,
            "description": "The socket connection timeout\n<ul>\n<li><code>0</code> Uses the default timeout from socket.io\n    <code>20000</code>ms.</li>\n<li><code>>0</code> Uses the user set timeout</li>\n</ul>",
            "itemtype": "attribute",
            "name": "_socketTimeout",
            "type": "Integer",
            "default": "0",
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 130,
            "description": "The socket connection to use XDomainRequest.",
            "itemtype": "attribute",
            "name": "_socketUseXDR",
            "type": "Boolean",
            "default": "false",
            "required": 1,
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 142,
            "description": "Sends a message to the signaling server.\n- Not to be confused with method\n  {{#crossLink \"Skylink/sendMessage:method\"}}sendMessage(){{/crossLink}}\n  that broadcasts messages. This is for sending socket messages.",
            "itemtype": "method",
            "name": "_sendChannelMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 163,
            "description": "Create the socket object to refresh connection.",
            "itemtype": "method",
            "name": "_createSocket",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 244,
            "description": "Create the default socket object connection.",
            "itemtype": "method",
            "name": "_createDefaultSocket",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 283,
            "description": "Create the fallback socket object reconnection.",
            "itemtype": "method",
            "name": "_createFallbackSocket",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 333,
            "description": "Create the long-polling fallback socket object reconnection.",
            "itemtype": "method",
            "name": "_createLongpollingSocket",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 397,
            "description": "Initiate a socket signaling connection.",
            "itemtype": "method",
            "name": "_openChannel",
            "trigger": "channelMessage, channelOpen, channelError, channelClose",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 426,
            "description": "Closes the socket signaling connection.",
            "itemtype": "method",
            "name": "_closeChannel",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1,
            "description": "The list of signaling message types.\n- These are the list of available signaling message types expected to\n  be sent and received.\n- These message types are fixed.\n- The sub-param <b>message</b> is NOT an actual property of each types.",
            "itemtype": "attribute",
            "name": "_SIG_MESSAGE_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "JOIN_ROOM",
                    "description": "User request to join the room.\n  Sent in {{#crossLink \"Skylink/_waitForOpenChannel:method\"}}\n  _waitForOpenChannel(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "Received rid from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "uid",
                                    "description": "Received uid from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "cid",
                                    "description": "Received cid from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "userCred",
                                    "description": "Received userCred from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "timeStamp",
                                    "description": "Received timeStamp from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "apiOwner",
                                    "description": "Received apiOwner from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "roomCred",
                                    "description": "Received roomCred from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "start",
                                    "description": "Received start from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "len",
                                    "description": "Received duration from API web-server.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "IN_ROOM",
                    "description": "Response from server that user has joined the room.\n  Received in {{#crossLink \"Skylink/_inRoomHandler:method\"}}\n  _inRoomHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "sid",
                                    "description": "PeerId of self.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is\n  sending the joinRoom message.",
                                    "type": "String"
                                },
                                {
                                    "name": "pc_config",
                                    "description": "The peerconnection configuration.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "ENTER",
                    "description": "Step 1 of the handshake.\n  Sent as a broadcast message to inform other connected peers in the room\n  that the user is the new peer joining the room.\n  Received when a peer has just joined the room.\n  Sent in {{#crossLink \"Skylink/_inRoomHandler:method\"}}\n  _inRoomHandler(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_enterHandler:method\"}}\n  _enterHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending the enter shake.",
                                    "type": "String"
                                },
                                {
                                    "name": "receiveOnly",
                                    "description": "Peer to receive only.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "agent",
                                    "description": "Peer's browser agent.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser version.",
                                    "type": "String"
                                },
                                {
                                    "name": "userInfo",
                                    "description": "Peer's user information.",
                                    "type": "String"
                                },
                                {
                                    "name": "userInfo.settings",
                                    "description": "Peer's stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "userInfo.settings.audio",
                                    "description": "",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "userInfo.settings.audio.stereo",
                                    "description": "",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "userInfo.settings.video",
                                    "description": "",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "userInfo.settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.settings.video.resolution.width",
                                    "description": "",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.settings.video.resolution.height",
                                    "description": "",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.settings.video.frameRate",
                                    "description": "",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.mediaStatus",
                                    "description": "Peer stream status.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "userInfo.mediaStatus.audioMuted",
                                    "description": "If peer's audio stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userInfo.mediaStatus.videoMuted",
                                    "description": "If peer's video stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userInfo.userData",
                                    "description": "Peer custom data.",
                                    "type": "String|JSON"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "WELCOME",
                    "description": "Reponse to start createOffer().\n  Sent as a respond to user to request peer to create the offer.\n  Received as a response from peer that peer acknowledges the user has\n  joined the room and create the offer.\n  Sent in {{#crossLink \"Skylink/_enterHandler:method\"}}\n  _enterHandler(){{/crossLink}},\n  {{#crossLink \"Skylink/_doOffer:method\"}}_doOffer(){{/crossLink}},\n  {{#crossLink \"Skylink/_restartPeerConnection:method\"}}\n   _restartPeerConnection{{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_welcomeHandler:method\"}}\n  _welcomeHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending the welcome shake.",
                                    "type": "String"
                                },
                                {
                                    "name": "receiveOnly",
                                    "description": "Peer to receive only",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "enableIceTrickle",
                                    "description": "Option to enable Ice trickle or not",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "enableDataChannel",
                                    "description": "Option to enable DataChannel or not",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "userInfo",
                                    "description": "Peer's user information.",
                                    "type": "String"
                                },
                                {
                                    "name": "userInfo.settings",
                                    "description": "Peer's stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "userInfo.settings.audio",
                                    "description": "",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "userInfo.settings.audio.stereo",
                                    "description": "",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "userInfo.settings.video",
                                    "description": "",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "userInfo.settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.settings.video.resolution.width",
                                    "description": "",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.settings.video.resolution.height",
                                    "description": "",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.settings.video.frameRate",
                                    "description": "",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "userInfo.mediaStatus",
                                    "description": "Peer stream status.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "userInfo.mediaStatus.audioMuted",
                                    "description": "If peer's audio stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userInfo.mediaStatus.videoMuted",
                                    "description": "If peer's video stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userInfo.userData",
                                    "description": "Peer custom data.",
                                    "type": "String|JSON"
                                },
                                {
                                    "name": "agent",
                                    "description": "Browser agent.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Browser version.",
                                    "type": "String"
                                },
                                {
                                    "name": "target",
                                    "description": "PeerId of the peer targeted to receieve this message.",
                                    "type": "String"
                                },
                                {
                                    "name": "weight",
                                    "description": "The weight of the message.\n<ul>\n<li><code>>=0</code> Weight priority message.</li>\n<li><code>-1</code> Restart handshake but not refreshing peer connection object.</li>\n<li><code>-2</code> Restart handshake and refresh peer connection object.\n  This invokes a peerRestart event.</li>\n</ul>",
                                    "type": "Integer"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "OFFER",
                    "description": "An offer has been created.\n  Sent as a response to peer's request to create an offer.\n  Received as a response from peer's offer message.\n  Sent in {{#crossLink \"Skylink/_setLocalAndSendMessage:method\"}}\n  _setLocalAndSendMessage(){{/crossLink}},\n  {{#crossLink \"Skylink/_onIceCandidate:method\"}}\n  _onIceCandidate(){{/crossLink}}\n  Received in {{#crossLink \"Skylink/_offerHandler:method\"}}\n  _offerHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending the offer shake.",
                                    "type": "String"
                                },
                                {
                                    "name": "sdp",
                                    "description": "Offer sessionDescription",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "ANSWER",
                    "description": "An answer has been created as an response to the offer.\n  Sent as a response to peer's offer message.\n  Received as a response from peer's answer message. This is when connection is established.\n  Sent in {{#crossLink \"Skylink/_setLocalAndSendMessage:method\"}}\n  _setLocalAndSendMessage(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_answerHandler:method\"}}\n  _answerHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "sdp",
                                    "description": "Answer sessionDescription",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending the enter shake.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "CANDIDATE",
                    "description": "A peer's ICE candidate is created and received.\n  Sent when onicecandidate is called.\n  Received when peer sends an ice candidate.\n  Sent in {{#crossLink \"Skylink/_onIceCandidate:method\"}}\n  _onIceCandidate(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_candidateHandler:method\"}}\n  _candidateHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending the\n  offer shake.",
                                    "type": "String"
                                },
                                {
                                    "name": "sdp",
                                    "description": "Offer sessionDescription.",
                                    "type": "String"
                                },
                                {
                                    "name": "target",
                                    "description": "PeerId that is specifically\n  targeted to receive the message.",
                                    "type": "String"
                                },
                                {
                                    "name": "id",
                                    "description": "Peer's ICE candidate id.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidate",
                                    "description": "Peer's ICE candidate object.",
                                    "type": "String"
                                },
                                {
                                    "name": "label",
                                    "description": "Peer's ICE candidate label.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "BYE",
                    "description": "A peer has left the room.\n  Received when a peer has left the room.\n  Received in {{#crossLink \"Skylink/_byeHandler:method\"}}\n  _byeHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that has left the room.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message received.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "REDIRECT",
                    "description": "Server redirecting user or warning user.\n  Received as a server warning or redirect to user.\n  Received in {{#crossLink \"Skylink/_redirectHandler:method\"}}\n  _redirectHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "info",
                                    "description": "The reason for this action.",
                                    "type": "String"
                                },
                                {
                                    "name": "action",
                                    "description": "The action to work on.\n  [Rel: Skylink.SYSTEM_ACTION]",
                                    "type": "String"
                                },
                                {
                                    "name": "reason",
                                    "description": "The reason of why the action is worked upon.\n  [Rel: Skylink.SYSTEM_ACTION_REASON]",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "UPDATE_USER",
                    "description": "A peer's userData is updated.\n  Sent when the user's userData is updated.\n  Received when peer's userData is updated.\n  Sent in {{#crossLink \"Skylink/setUserData:method\"}}\n  setUserData(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_updateUserEventHandler:method\"}}\n  _updateUserEventHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending the\n  updated event.",
                                    "type": "String"
                                },
                                {
                                    "name": "userData",
                                    "description": "The peer's user data.",
                                    "type": "JSON|String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "ROOM_LOCK",
                    "description": "The room lock status has changed.\n  Sent when the room lock status has been updated by user.\n  Received when room lock status has changed by user.\n  Sent in {{#crossLink \"Skylink/lockRoom:method\"}}\n  lockRoom(){{/crossLink}},\n  {{#crossLink \"Skylink/unlockRoom:method\"}}\n  unlockRoom(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_roomLockEventHandler:method\"}}\n  _roomLockEventHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending the\n  updated room lock status.",
                                    "type": "String"
                                },
                                {
                                    "name": "lock",
                                    "description": "If room is locked or not.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "MUTE_VIDEO",
                    "description": "A user's audio mute status has changed.\n  Sent when user has muted video status changed.\n  Received when a peer's muted video status has changed.\n  Sent in {{#crossLink \"Skylink/_handleLocalMediaStreams:method\"}}\n  _handleLocalMediaStreams(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_muteVideoEventHandler:method\"}}\n  _muteVideoEventHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending\n  their own updated video streams status.",
                                    "type": "String"
                                },
                                {
                                    "name": "muted",
                                    "description": "If video stream is muted or not.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "MUTE_AUDIO",
                    "description": "A user's video mute status has changed.\n  Sent when user has muted audio status changed.\n  Received when a peer's muted audio status has changed.\n  Sent in {{#crossLink \"Skylink/_handleLocalMediaStreams:method\"}}\n  _handleLocalMediaStreams(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_muteAudioEventHandler:method\"}}\n  _muteAudioEventHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending\n  their own updated audio stream status.",
                                    "type": "String"
                                },
                                {
                                    "name": "muted",
                                    "description": "If audio stream is muted or not.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "PUBLIC_MESSAGE",
                    "description": "Sent when a user broadcasts message to all peers.\n  Received when user receives a peer's broadcast message.\n  Sent in {{#crossLink \"Skylink/sendMessage:method\"}}\n  sendMessage(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_publicMessageHandler:method\"}}\n  _publicMessageHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "data",
                                    "description": "The data broadcasted",
                                    "type": "JSON|String"
                                },
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "cid",
                                    "description": "CredentialId of the room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending a private\n  broadcast message.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "PRIVATE_MESSAGE",
                    "description": "Sent when a user sends a private message to a peers.\n  Received when user receives a peer's private message targeted to user.\n  Sent in {{#crossLink \"Skylink/sendMessage:method\"}}\n  sendMessage(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_privateMessageHandler:method\"}}\n  _privateMessageHandler(){{/crossLink}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message",
                            "description": "The message object.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "data",
                                    "description": "The data received.",
                                    "type": "JSON|String"
                                },
                                {
                                    "name": "rid",
                                    "description": "RoomId of the connected room.",
                                    "type": "String"
                                },
                                {
                                    "name": "cid",
                                    "description": "CredentialId of the room.",
                                    "type": "String"
                                },
                                {
                                    "name": "mid",
                                    "description": "PeerId of the peer that is sending a private\n  broadcast message.",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The type of message.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "RESTART",
                    "description": "Sent when a user requires to restart a peer connection.\n  Received when user receives a peer connection is restarted.\n  Sent in {{#crossLink \"Skylink/_restartPeerConnection:method\"}}\n  _restartPeerConnection(){{/crossLink}}.\n  Received in {{#crossLink \"Skylink/_restartHandler:method\"}}.",
                    "type": "String",
                    "props": [
                        {
                            "name": "message.rid",
                            "description": "RoomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "message.mid",
                            "description": "PeerId of the peer that is sending the welcome shake.",
                            "type": "String"
                        },
                        {
                            "name": "message.receiveOnly",
                            "description": "Peer to receive only",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "message.enableIceTrickle",
                            "description": "Option to enable Ice trickle or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "message.enableDataChannel",
                            "description": "Option to enable DataChannel or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "message.userInfo",
                            "description": "Peer's user information.",
                            "type": "String"
                        },
                        {
                            "name": "message.userInfo.settings",
                            "description": "Peer's stream settings",
                            "type": "JSON"
                        },
                        {
                            "name": "message.userInfo.settings.audio",
                            "description": "",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "message.userInfo.settings.audio.stereo",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "message.userInfo.settings.video",
                            "description": "",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "message.userInfo.settings.video.resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true
                        },
                        {
                            "name": "message.userInfo.settings.video.resolution.width",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "message.userInfo.settings.video.resolution.height",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "message.userInfo.settings.video.frameRate",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "message.userInfo.mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON"
                        },
                        {
                            "name": "message.userInfo.mediaStatus.audioMuted",
                            "description": "If peer's audio stream is muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "message.userInfo.mediaStatus.videoMuted",
                            "description": "If peer's video stream is muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "message.userInfo.userData",
                            "description": "Peer custom data.",
                            "type": "String|JSON"
                        },
                        {
                            "name": "message.agent",
                            "description": "Browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "message.version",
                            "description": "Browser version.",
                            "type": "String"
                        },
                        {
                            "name": "message.target",
                            "description": "PeerId of the peer targeted to receieve this message.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "readonly": "",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 340,
            "description": "Checking if MCU exists in the room",
            "itemtype": "attribute",
            "name": "_hasMCU",
            "type": "Boolean",
            "development": "true",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 351,
            "description": "Handles every incoming signaling message received.\n- If it's a SIG_TYPE.GROUP message, break them down to single messages\n  and let {{#crossLink \"Skylink/_processSingleMessage:method\"}}\n  _processSingleMessage(){{/crossLink}} to handle them.",
            "itemtype": "method",
            "name": "_processSigMessage",
            "params": [
                {
                    "name": "messageString",
                    "description": "The message object stringified received.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 374,
            "description": "Handles the single signaling message received.",
            "itemtype": "method",
            "name": "_processingSingleMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 449,
            "description": "Signaling server sends a redirect message.\n- This occurs when the signaling server is warning us or wanting\n  to move us out when the peer sends too much messages at the\n  same tme.",
            "itemtype": "method",
            "name": "_redirectHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.REDIRECT.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "systemAction",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 471,
            "description": "Signaling server sends a updateUserEvent message.\n- This occurs when a peer's custom user data is updated.",
            "itemtype": "method",
            "name": "_updateUserEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.UPDATE_USER.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 494,
            "description": "Signaling server sends a roomLockEvent message.\n- This occurs when a room lock status has changed.",
            "itemtype": "method",
            "name": "_roomLockEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.ROOM_LOCK.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "roomLock",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 512,
            "description": "Signaling server sends a muteAudioEvent message.\n- SIG_TYPE: MUTE_AUDIO\n- This occurs when a peer's audio stream muted\n  status has changed.",
            "itemtype": "method",
            "name": "_muteAudioEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.MUTE_AUDIO.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 537,
            "description": "Signaling server sends a muteVideoEvent message.\n- This occurs when a peer's video stream muted\n  status has changed.",
            "itemtype": "method",
            "name": "_muteVideoEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.MUTE_VIDEO.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 561,
            "description": "Signaling server sends a bye message.\n- SIG_TYPE: BYE\n- This occurs when a peer left the room.",
            "itemtype": "method",
            "name": "_byeHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.BYE.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "peerLeft",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 579,
            "description": "Signaling server sends a privateMessage message.\n- SIG_TYPE: PRIVATE_MESSAGE\n- This occurs when a peer sends private message to user.",
            "itemtype": "method",
            "name": "_privateMessageHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.PRIVATE_MESSAGE.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "privateMessage",
            "access": "private",
            "tagname": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 604,
            "description": "Signaling server sends a publicMessage message.\n- SIG_TYPE: PUBLIC_MESSAGE\n- This occurs when a peer broadcasts a public message to\n  all connected peers.",
            "itemtype": "method",
            "name": "_publicMessageHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.PUBLIC_MESSAGE.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "publicMessage",
            "access": "private",
            "tagname": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 630,
            "description": "Signaling server sends an inRoom message.\n- SIG_TYPE: IN_ROOM\n- This occurs the user has joined the room.",
            "itemtype": "method",
            "name": "_inRoomHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.IN_ROOM.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "peerJoined",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 666,
            "description": "Signaling server sends a enter message.\n- SIG_TYPE: ENTER\n- This occurs when a peer just entered the room.\n- If we don't have a connection with the peer, send a welcome.",
            "itemtype": "method",
            "name": "_enterHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.ENTER.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress, peerJoined",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 726,
            "description": "Signaling server sends a restart message.\n- SIG_TYPE: RESTART\n- This occurs when the other peer initiates the restart process\n  by sending a restart message to signaling server.",
            "itemtype": "method",
            "name": "_restartHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.RESTART.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress, peerRestart",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 773,
            "description": "Signaling server sends a welcome message.\n- SIG_TYPE: WELCOME\n- This occurs when we've just received a welcome.\n- If there is no existing connection with this peer,\n  create one, then set the remotedescription and answer.",
            "itemtype": "method",
            "name": "_welcomeHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.WELCOME.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress, peerJoined",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 859,
            "description": "Signaling server sends an offer message.\n- SIG_TYPE: OFFER\n- This occurs when we've just received an offer.\n- If there is no existing connection with this peer, create one,\n  then set the remotedescription and answer.",
            "itemtype": "method",
            "name": "_offerHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.OFFER.messa]",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 901,
            "description": "Signaling server sends a candidate message.\n- SIG_TYPE: CANDIDATE\n- This occurs when a peer sends an ice candidate.",
            "itemtype": "method",
            "name": "_candidateHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.CANDIDATE.message]",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 962,
            "description": "Signaling server sends an answer message.\n- SIG_TYPE: ANSWER\n- This occurs when a peer sends an answer message is received.",
            "itemtype": "method",
            "name": "_answerHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.ANSWER.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 999,
            "description": "Send a message to one or all peer(s) in room.\n- <b><i>WARNING</i></b>: Map arrays data would be lost when stringified\n  in JSON, so refrain from using map arrays.\n- Message is sent using websockets, we don't ensure protection of your message content\nwith this method. Prefer using\n{{#crossLink \"Skylink/sendP2PMessage:method\"}}sendP2PMessage(){{/crossLink}}.",
            "itemtype": "method",
            "name": "sendMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message data to send.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "PeerId of the peer to send a private\n  message data to. If not specified then send to all peers.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send to all peers\n  SkylinkDemo.sendMessage('Hi there!');\n\n  // Example 2: Send to a targeted peer\n  SkylinkDemo.sendMessage('Hi there peer!', targetPeerId);"
            ],
            "trigger": "incomingMessage",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1,
            "description": "The list of recommended video resolutions.\n- Note that the higher the resolution, the connectivity speed might\n  be affected.\n- The available video resolutions type are:",
            "params": [
                {
                    "name": "QQVGA",
                    "description": "QQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "160",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "120",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HQVGA",
                    "description": "HQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "240",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "160",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QVGA",
                    "description": "QVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "320",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "180",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WQVGA",
                    "description": "WQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "384",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "240",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:10",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HVGA",
                    "description": "HVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "480",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "320",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "VGA",
                    "description": "VGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "640",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "360",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WVGA",
                    "description": "WVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "768",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:10",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FWVGA",
                    "description": "FWVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "854",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "SVGA",
                    "description": "SVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "800",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "600",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "DVGA",
                    "description": "DVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "960",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "640",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WSVGA",
                    "description": "WSVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1024",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "576",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HD",
                    "description": "HD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1280",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "720",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HDPLUS",
                    "description": "HDPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1600",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "900",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FHD",
                    "description": "FHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1920",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "1080",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QHD",
                    "description": "QHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "2560",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "1440",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WQXGAPLUS",
                    "description": "WQXGAPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "3200",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "1800",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "UHD",
                    "description": "UHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "3840",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "2160",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "UHDPLUS",
                    "description": "UHDPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "5120",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "2880",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FUHD",
                    "description": "FUHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "7680",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "4320",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QUHD",
                    "description": "QUHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "15360",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "8640",
                            "type": "Integer"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                }
            ],
            "itemtype": "attribute",
            "name": "VIDEO_RESOLUTION",
            "type": "JSON",
            "readonly": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 115,
            "description": "The list of local media streams.",
            "itemtype": "attribute",
            "name": "_mediaStreams",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 125,
            "description": "The user stream settings.",
            "itemtype": "attribute",
            "name": "_streamSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "This call requires audio",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "video",
                    "description": "This call requires video",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Integer",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "bandwidth",
                    "description": "Bandwidth settings",
                    "type": "String",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio Bandwidth",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "video",
                            "description": "Video Bandwidth",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "Data Bandwidth.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 146,
            "description": "The getUserMedia settings parsed from\n{{#crossLink \"Skylink/_streamSettings:attr\"}}_streamSettings{{/crossLink}}.",
            "itemtype": "attribute",
            "name": "_getUserMediaSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "This call requires audio.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "video",
                    "description": "This call requires video.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "mandatory.maxHeight",
                            "description": "Video maximum width.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "mandatory.maxWidth",
                            "description": "Video maximum height.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "mandatory.maxFrameRate",
                            "description": "Maximum frameRate of Video.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "optional",
                            "description": "The getUserMedia options.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 163,
            "description": "The user MediaStream(s) status.",
            "itemtype": "attribute",
            "name": "_mediaStreamsStatus",
            "type": "JSON",
            "params": [
                {
                    "name": "audioMuted",
                    "description": "Is user's audio muted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "videoMuted",
                    "description": "Is user's vide muted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 175,
            "description": "Fallback to audio call if audio and video is required.",
            "itemtype": "attribute",
            "name": "_audioFallback",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 187,
            "description": "Access to user's MediaStream is successful.",
            "itemtype": "method",
            "name": "_onUserMediaSuccess",
            "params": [
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "MediaStream"
                }
            ],
            "trigger": "mediaAccessSuccess",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 223,
            "description": "Access to user's MediaStream failed.",
            "itemtype": "method",
            "name": "_onUserMediaError",
            "params": [
                {
                    "name": "error",
                    "description": "Error object that was thrown.",
                    "type": "Object"
                }
            ],
            "trigger": "mediaAccessError",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 256,
            "description": "The remote peer advertised streams, that we are forwarding to the app. This is part\nof the peerConnection's addRemoteDescription() API's callback.",
            "itemtype": "method",
            "name": "_onRemoteStreamAdded",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer that has remote stream to send.",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "This is provided directly by the peerconnection API.",
                    "type": "Event"
                }
            ],
            "trigger": "incomingStream",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 291,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseAudioStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "This call requires audio",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed audio options.\n- settings: User set audio options\n- userMedia: getUserMedia options",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 324,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseAudioStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "This call requires video",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "640"
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "480"
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "50"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed video options.\n- settings: User set video options\n- userMedia: getUserMedia options",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 385,
            "description": "Parse and set bandwidth settings.",
            "itemtype": "method",
            "name": "_parseBandwidthSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Bandwidth settings",
                    "type": "String",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "video",
                            "description": "Video Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "256"
                        },
                        {
                            "name": "data",
                            "description": "Data Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "1638400"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 414,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseMutedSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of video.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed muted options.",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 448,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseMediaStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of video.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 494,
            "description": "Sends our Local MediaStreams to other Peers.\nBy default, it sends all it's other stream",
            "itemtype": "method",
            "name": "_addLocalMediaStreams",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to send local stream to.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 520,
            "description": "Stops all MediaStreams(s) playback and streaming.",
            "itemtype": "method",
            "name": "_stopLocalMediaStreams",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 539,
            "description": "Handles the muting of audio and video streams.",
            "itemtype": "method",
            "name": "_muteLocalMediaStreams",
            "return": {
                "description": "options.hasVideoTracks If MediaStream(s) has video tracks."
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 592,
            "description": "Waits for MediaStream.\n- Once the stream is loaded, callback is called\n- If there's not a need for stream, callback is called",
            "itemtype": "method",
            "name": "_waitForLocalMediaStream",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback after requested constraints are loaded.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data.",
                            "type": "JSON",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of Video",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Bandwidth settings",
                            "type": "String",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio Bandwidth",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "video",
                                    "description": "Video Bandwidth",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "256"
                                },
                                {
                                    "name": "data",
                                    "description": "Data Bandwidth",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "1638400"
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "mediaAccessRequired",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 704,
            "description": "Gets the default video source and microphone source.\n- This is an implemented function for Skylink.\n- Constraints are not the same as the [MediaStreamConstraints](http://dev.w3.\n  org/2011/webrtc/editor/archives/20140817/getusermedia.html#dictionary\n  -mediastreamconstraints-members) specified in the w3c specs.\n- Calling <b>getUserMedia</b> while having streams being sent to another peer may\n  actually cause problems, because currently <b>getUserMedia</b> refreshes all streams.",
            "itemtype": "method",
            "name": "getUserMedia",
            "params": [
                {
                    "name": "options",
                    "description": "MediaStream constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Option to allow audio stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "true",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Option to allow video stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "true",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after media was successfully accessed.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Default is to get both audio and video\n  // Example 1: Get both audio and video by default.\n  SkylinkDemo.getUserMedia();\n\n  // Example 2: Get the audio stream only\n  SkylinkDemo.getUserMedia({\n    'video' : false,\n    'audio' : true\n  });\n\n  // Example 3: Set the stream settings for the audio and video\n  SkylinkDemo.getUserMedia({\n    'video' : {\n       'resolution': SkylinkDemo.VIDEO_RESOLUTION.HD,\n       'frameRate': 50\n     },\n    'audio' : {\n      'stereo': true\n    }\n  });\n\n  // Example 4: Get user media with callback\n  SkylinkDemo.getUserMedia({\n    'video' : false,\n    'audio' : true\n  },function(error,success){\n     if (error){\n       console.log(error);\n     }\n     else{\n       console.log(success);\n    }\n  });"
            ],
            "trigger": "mediaAccessSuccess, mediaAccessError",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 815,
            "description": "Resends a Local MediaStreams. This overrides all previous MediaStreams sent.\nProvided MediaStream would be automatically detected as unmuted by default.",
            "itemtype": "method",
            "name": "sendStream",
            "params": [
                {
                    "name": "stream",
                    "description": "The stream object or options.",
                    "type": "Object|JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "If send a new stream with audio.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "mute",
                                    "description": "If send a new stream with audio muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Option to allow video stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Integer",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Integer",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "mute",
                                    "description": "If send a new stream with video muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after stream was sent.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send a stream object instead\n  SkylinkDemo.on('mediaAccessSuccess', function (stream) {\n    SkylinkDemo.sendStream(stream);\n  });\n\n  // Example 2: Send stream with getUserMedia automatically called for you\n  SkylinkDemo.sendStream({\n    audio: true,\n    video: false\n  });\n\n  // Example 3: Send stream with getUserMedia automatically called for you\n  // and audio is muted\n  SkylinkDemo.sendStream({\n    audio: true,\n    video: false,\n    audioMuted: true\n  });\n   \n  // Example 4: Send stream with callback\n  SkylinkDemo.sendStream({\n   audio: true,\n   video: true \n  },function(error,success){\n   if (error){\n     console.log('Error occurred. Stream was not sent: '+error)\n   }\n   else{\n     console.log('Stream successfully sent: '+success);\n   }\n  });"
            ],
            "trigger": "peerRestart, incomingStream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 968,
            "description": "Mutes a Local MediaStreams.",
            "itemtype": "method",
            "name": "muteStream",
            "params": [
                {
                    "name": "options",
                    "description": "The muted options.",
                    "type": "Object|JSON",
                    "props": [
                        {
                            "name": "audioMuted",
                            "description": "If send a new stream with audio muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "videoMuted",
                            "description": "If send a new stream with video muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "getEmptyStream",
                            "description": "If audio or video muted is set and there is\n  no audio or video stream, it will get the stream before muting it.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "example": [
                "\n  SkylinkDemo.muteStream({\n    audioMuted: true,\n    videoMuted: false\n  });"
            ],
            "trigger": "peerRestart, peerUpdated, incomingStream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1066,
            "description": "Enable microphone.\n- Try to start the audio source.\n- If no audio source was initialy set, this function has no effect.\n- If you want to activate your audio but haven't initially enabled it you would need to\n  reinitiate your connection with\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  process and set the audio parameter to true.",
            "itemtype": "method",
            "name": "enableAudio",
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "example": [
                "\n  SkylinkDemo.enableAudio();"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1089,
            "description": "Disable microphone.\n- Try to disable the microphone.\n- If no microphone was initially set, this function has no effect.",
            "itemtype": "method",
            "name": "disableAudio",
            "example": [
                "\n  SkylinkDemo.disableAudio();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1108,
            "description": "Enable webcam video.\n- Try to start the video source.\n- If no video source was initialy set, this function has no effect.\n- If you want to activate your video but haven't initially enabled it you would need to\n  reinitiate your connection with\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  process and set the video parameter to true.",
            "itemtype": "method",
            "name": "enableVideo",
            "example": [
                "\n  SkylinkDemo.enableVideo();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1131,
            "description": "Disable video source.\n- Try to disable the video source.\n- If no video source was initially set, this function has no effect.",
            "itemtype": "method",
            "name": "disableVideo",
            "example": [
                "\n  SkylinkDemo.disableVideo();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 1,
            "description": "Finds a line in the SDP that contains the condition string and returns it.",
            "itemtype": "method",
            "name": "_findSDPLine",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                },
                {
                    "name": "condition",
                    "description": "Return if one of the conditions satisfies.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "[index, line] - Returns the sdpLines based on the condition",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 24,
            "description": "Adds stereo feature to the SDP.\n- This requires OPUS to be enabled in the SDP or it will not work.",
            "itemtype": "method",
            "name": "_addSDPStereo",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version with Stereo feature",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 56,
            "description": "Set Audio, Video and Frame rate in SDP",
            "itemtype": "method",
            "name": "_setSDPVideoResolution",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version with custom Resolution settings",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 78,
            "description": "Set Audio, Video and Data Bitrate in SDP",
            "itemtype": "method",
            "name": "_setSDPBitrate",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version with custom Bandwidth settings",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 110,
            "description": "Removes Firefox 32 H264 preference in sdp.\n- As noted in bugzilla as bug in [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1064247).",
            "itemtype": "method",
            "name": "_removeSDPFirefoxH264Pref",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version removing Firefox h264 pref support.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: trigger",
            "line": " source/data-channel.js:56"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:406"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:445"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:502"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:527"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:555"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:584"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:676"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:844"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:881"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:917"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/ice-candidate.js:37"
        },
        {
            "message": "unknown tag: development",
            "line": " source/ice-connection.js:97"
        },
        {
            "message": "unknown tag: unsupported",
            "line": " source/ice-connection.js:97"
        },
        {
            "message": "unknown tag: development",
            "line": " source/ice-connection.js:111"
        },
        {
            "message": "unknown tag: unsupported",
            "line": " source/ice-connection.js:111"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-connection.js:168"
        },
        {
            "message": "unknown tag: triggers",
            "line": " source/peer-connection.js:305"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-data.js:38"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-handshake.js:208"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:79"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:265"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:342"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:404"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:425"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:341"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:405"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:473"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:518"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:25"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:37"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:49"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:62"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:75"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:89"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:103"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:115"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:141"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:158"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:231"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:307"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:323"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:346"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:369"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:414"
        },
        {
            "message": "unknown tag: iceconnectionstate",
            "line": " source/skylink-events.js:136"
        },
        {
            "message": "unknown tag: unsupported",
            "line": " source/skylink-events.js:320"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-channel.js:397"
        },
        {
            "message": "unknown tag: development",
            "line": " source/socket-message.js:340"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:449"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:471"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:494"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:512"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:537"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:561"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:579"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:604"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:630"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:666"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:726"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:773"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:859"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:962"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:999"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:187"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:223"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:256"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:592"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:704"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:815"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:968"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1066"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1089"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1108"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1131"
        },
        {
            "message": "Missing item type\n// resend if failed\nif (iceConnectionState === self.ICE_CONNECTION_STATE.FAILED) {\n  log.debug([targetMid, 'RTCIceConnectionState', null,\n    'Ice connection state failed. Re-negotiating connection']);\n  self._removePeer(targetMid);\n  self._sendChannelMessage({\n    type: self._SIG_MESSAGE_TYPE.WELCOME,\n    mid: self._user.sid,\n    rid: self._room.id,\n    agent: window.webrtcDetectedBrowser,\n    version: window.webrtcDetectedVersion,\n    userInfo: self.getPeerInfo(),\n    target: targetMid,\n    restartNego: true,\n    hsPriority: -1\n  });",
            "line": " source/peer-connection.js:269"
        },
        {
            "message": "Missing item type\nEvent fired when an ICE connection state has changed.",
            "line": " source/skylink-events.js:136"
        }
    ]
}