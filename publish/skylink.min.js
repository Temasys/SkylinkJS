/*! skylinkjs - v0.5.7 - 2015-01-09 */
(function(){"use strict";function Skylink(){return this instanceof Skylink?void(this.VERSION="0.5.7"):new Skylink}this.Skylink=Skylink,Skylink.prototype.DATA_CHANNEL_STATE={CONNECTING:"connecting",OPEN:"open",CLOSING:"closing",CLOSED:"closed",ERROR:"error"},Skylink.prototype._enableDataChannel=!0,Skylink.prototype._dataChannels=[],Skylink.prototype._createDataChannel=function(peerId,dc){var self=this,channelName=dc?dc.label:peerId,pc=self._peerConnections[peerId];return"SCTP"!==window.webrtcDetectedDCSupport&&"plugin"!==window.webrtcDetectedDCSupport?void log.warn([peerId,"RTCDataChannel",channelName,"SCTP not supported"]):(dc?dc.readyState===self.DATA_CHANNEL_STATE.OPEN?(log.log([peerId,"RTCDataChannel",channelName,"Datachannel state ->"],"open"),log.log([peerId,"RTCDataChannel",channelName,"Binary type support ->"],dc.binaryType),self._trigger("dataChannelState",dc.readyState,peerId)):dc.onopen=function(){log.log([peerId,"RTCDataChannel",channelName,"Datachannel state ->"],"open"),log.log([peerId,"RTCDataChannel",channelName,"Binary type support ->"],dc.binaryType),self._trigger("dataChannelState",dc.readyState,peerId)}:(dc=pc.createDataChannel(channelName),self._trigger("dataChannelState",dc.readyState,peerId),self._checkDataChannelReadyState(dc,function(){log.log([peerId,"RTCDataChannel",channelName,"Datachannel state ->"],"open"),log.log([peerId,"RTCDataChannel",channelName,"Binary type support ->"],dc.binaryType),self._trigger("dataChannelState",dc.readyState,peerId)},self.DATA_CHANNEL_STATE.OPEN)),dc.onerror=function(error){log.error([peerId,"RTCDataChannel",channelName,"Exception occurred in datachannel:"],error),self._trigger("dataChannelState",self.DATA_CHANNEL_STATE.ERROR,peerId,error)},dc.onclose=function(){log.debug([peerId,"RTCDataChannel",channelName,"Datachannel state ->"],"closed"),self._peerConnections[peerId]&&self._peerConnectionHealth[peerId]?self._createDataChannel(peerId):self._trigger("dataChannelState",self.DATA_CHANNEL_STATE.CLOSED,peerId)},dc.onmessage=function(event){self._dataChannelProtocolHandler(event.data,peerId,channelName)},dc)},Skylink.prototype._checkDataChannelReadyState=function(dc,callback,state){var self=this;return self._enableDataChannel?"object"!=typeof dc?void log.error("Datachannel not provided"):"function"!=typeof callback?void log.error("Callback not provided"):state?void self._wait(function(){log.log([null,"RTCDataChannel",dc.label,"Firing callback. Datachannel state has met provided state ->"],state),callback()},function(){return dc.readyState===state}):void log.error("State undefined"):(log.debug("Datachannel not enabled. Returning callback"),void callback())},Skylink.prototype._sendDataChannelMessage=function(peerId,data){var dc=this._dataChannels[peerId];if(!dc)return void log.error([peerId,"RTCDataChannel",null,"Datachannel connection to peer does not exist"]);if(dc.readyState===this.DATA_CHANNEL_STATE.OPEN){var dataString="object"==typeof data?JSON.stringify(data):data;log.debug([peerId,"RTCDataChannel",dc.label,"Sending to peer ->"],data.type||"DATA"),dc.send(dataString)}else log.error([peerId,"RTCDataChannel",dc.label,"Datachannel is not opened"],"State: "+dc.readyState),this._trigger("dataChannelState",this.DATA_CHANNEL_STATE.ERROR,peerId,"Datachannel is not ready.\nState is: "+dc.readyState)},Skylink.prototype._closeDataChannel=function(peerId){var dc=this._dataChannels[peerId];dc&&(dc.readyState!==this.DATA_CHANNEL_STATE.CLOSED&&dc.close(),delete this._dataChannels[peerId],log.log([peerId,"RTCDataChannel",dc.label,"Sucessfully removed datachannel"]))},Skylink.prototype._CHUNK_FILE_SIZE=49152,Skylink.prototype._MOZ_CHUNK_FILE_SIZE=16384,Skylink.prototype.DATA_TRANSFER_DATA_TYPE={BINARY_STRING:"binaryString",ARRAY_BUFFER:"arrayBuffer",BLOB:"blob"},Skylink.prototype._base64ToBlob=function(dataURL){for(var byteString=atob(dataURL.replace(/\s\r\n/g,"")),ab=new ArrayBuffer(byteString.length),ia=new Uint8Array(ab),j=0;j<byteString.length;j++)ia[j]=byteString.charCodeAt(j);return new Blob([ab])},Skylink.prototype._chunkBlobData=function(blob,blobByteSize){var chunksArray=[],startCount=0,endCount=0;if(blobByteSize>this._CHUNK_FILE_SIZE){for(;blobByteSize-1>endCount;)endCount=startCount+this._CHUNK_FILE_SIZE,chunksArray.push(blob.slice(startCount,endCount)),startCount+=this._CHUNK_FILE_SIZE;blobByteSize-(startCount+1)>0&&chunksArray.push(blob.slice(startCount,blobByteSize-1))}else chunksArray.push(blob);return chunksArray},Skylink.prototype._DC_PROTOCOL_TYPE={WRQ:"WRQ",ACK:"ACK",ERROR:"ERROR",CANCEL:"CANCEL",MESSAGE:"MESSAGE"},Skylink.prototype.DATA_TRANSFER_TYPE={UPLOAD:"upload",DOWNLOAD:"download"},Skylink.prototype.DATA_TRANSFER_STATE={UPLOAD_REQUEST:"request",UPLOAD_STARTED:"uploadStarted",DOWNLOAD_STARTED:"downloadStarted",REJECTED:"rejected",CANCEL:"cancel",ERROR:"error",UPLOADING:"uploading",DOWNLOADING:"downloading",UPLOAD_COMPLETED:"uploadCompleted",DOWNLOAD_COMPLETED:"downloadCompleted"},Skylink.prototype._uploadDataTransfers=[],Skylink.prototype._uploadDataSessions=[],Skylink.prototype._downloadDataTransfers=[],Skylink.prototype._downloadDataSessions=[],Skylink.prototype._dataTransfersTimeout=[],Skylink.prototype._setDataChannelTimeout=function(peerId,timeout,isSender){var self=this;self._dataTransfersTimeout[peerId]||(self._dataTransfersTimeout[peerId]=[]);var type=isSender?self.DATA_TRANSFER_TYPE.UPLOAD:self.DATA_TRANSFER_TYPE.DOWNLOAD;self._dataTransfersTimeout[peerId][type]=setTimeout(function(){var name;self._dataTransfersTimeout[peerId][type]&&(isSender?(name=self._uploadDataSessions[peerId].name,delete self._uploadDataTransfers[peerId],delete self._uploadDataSessions[peerId]):(name=self._downloadDataSessions[peerId].name,delete self._downloadDataTransfers[peerId],delete self._downloadDataSessions[peerId]),self._sendDataChannelMessage(peerId,{type:self._DC_PROTOCOL_TYPE.ERROR,sender:self._user.sid,name:name,content:"Connection Timeout. Longer than "+timeout+" seconds. Connection is abolished.",isUploadError:isSender}),log.error([peerId,"RTCDataChannel",null,"Failed transfering data:"],"Transfer "+(isSender?"for":"from")+" "+peerId+" failed. Connection timeout"),self._clearDataChannelTimeout(peerId,isSender))},1e3*timeout)},Skylink.prototype._clearDataChannelTimeout=function(peerId,isSender){if(this._dataTransfersTimeout[peerId]){var type=isSender?this.DATA_TRANSFER_TYPE.UPLOAD:this.DATA_TRANSFER_TYPE.DOWNLOAD;clearTimeout(this._dataTransfersTimeout[peerId][type]),delete this._dataTransfersTimeout[peerId][type]}},Skylink.prototype._sendBlobDataToPeer=function(data,dataInfo,targetPeerId,isPrivate){var useChannel=this._hasMCU?"MCU":targetPeerId,ongoingTransfer=null,binarySize=parseInt((dataInfo.size*(4/3)).toFixed(),10),chunkSize=parseInt((this._CHUNK_FILE_SIZE*(4/3)).toFixed(),10);return"firefox"===window.webrtcDetectedBrowser&&window.webrtcDetectedVersion<30&&(chunkSize=this._MOZ_CHUNK_FILE_SIZE),log.log([targetPeerId,null,null,"Chunk size of data:"],chunkSize),this._uploadDataSessions[targetPeerId]?ongoingTransfer=this.DATA_TRANSFER_TYPE.UPLOAD:this._downloadDataSessions[targetPeerId]&&(ongoingTransfer=this.DATA_TRANSFER_TYPE.DOWNLOAD),ongoingTransfer?(log.error([targetPeerId,null,null,"User have ongoing "+ongoingTransfer+" transfer session with peer. Unable to send data"],dataInfo),void this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.ERROR,dataInfo.transferId,targetPeerId,{},{name:dataInfo.name,message:dataInfo.content,transferType:ongoingTransfer})):(this._uploadDataTransfers[targetPeerId]=this._chunkBlobData(data,dataInfo.size),this._uploadDataSessions[targetPeerId]={name:dataInfo.name,size:binarySize,transferId:dataInfo.transferId,timeout:dataInfo.timeout},this._sendDataChannelMessage(useChannel,{type:this._DC_PROTOCOL_TYPE.WRQ,sender:this._user.sid,agent:window.webrtcDetectedBrowser,name:dataInfo.name,size:binarySize,chunkSize:chunkSize,timeout:dataInfo.timeout,target:targetPeerId,isPrivate:!!isPrivate}),void this._setDataChannelTimeout(targetPeerId,dataInfo.timeout,!0))},Skylink.prototype._dataChannelProtocolHandler=function(dataString,peerId,channelName){if("string"==typeof dataString){var data={};try{data=JSON.parse(dataString)}catch(error){return log.debug([peerId,"RTCDataChannel",channelName,"Received from peer ->"],"DATA"),void this._DATAProtocolHandler(peerId,dataString,this.DATA_TRANSFER_DATA_TYPE.BINARY_STRING,channelName)}switch(log.debug([peerId,"RTCDataChannel",channelName,"Received from peer ->"],data.type),data.type){case this._DC_PROTOCOL_TYPE.WRQ:this._WRQProtocolHandler(peerId,data,channelName);break;case this._DC_PROTOCOL_TYPE.ACK:this._ACKProtocolHandler(peerId,data,channelName);break;case this._DC_PROTOCOL_TYPE.ERROR:this._ERRORProtocolHandler(peerId,data,channelName);break;case this._DC_PROTOCOL_TYPE.CANCEL:this._CANCELProtocolHandler(peerId,data,channelName);break;case this._DC_PROTOCOL_TYPE.MESSAGE:this._MESSAGEProtocolHandler(peerId,data,channelName);break;default:log.error([peerId,"RTCDataChannel",channelName,"Unsupported message ->"],data.type)}}},Skylink.prototype._WRQProtocolHandler=function(peerId,data,channelName){var transferId=this._user.sid+this.DATA_TRANSFER_TYPE.DOWNLOAD+(new Date).toISOString().replace(/-/g,"").replace(/:/g,"").replace(".","");log.log([peerId,"RTCDataChannel",[channelName,"WRQ"],"Received file request from peer:"],data);var name=data.name,binarySize=data.size,expectedSize=data.chunkSize,timeout=data.timeout;this._downloadDataSessions[peerId]={transferId:transferId,name:name,size:binarySize,ackN:0,receivedSize:0,chunkSize:expectedSize,timeout:timeout},this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.UPLOAD_REQUEST,transferId,peerId,{name:name,size:binarySize,senderPeerId:peerId})},Skylink.prototype._ACKProtocolHandler=function(peerId,data,channelName){var self=this,ackN=data.ackN;peerId="MCU"===peerId?data.sender:peerId;var chunksLength=self._uploadDataTransfers[peerId].length,uploadedDetails=self._uploadDataSessions[peerId],transferId=uploadedDetails.transferId,timeout=uploadedDetails.timeout;if(self._clearDataChannelTimeout(peerId,!0),log.log([peerId,"RTCDataChannel",[channelName,"ACK"],"ACK stage ->"],ackN+" / "+chunksLength),ackN>-1)if(chunksLength>ackN){var fileReader=new FileReader;fileReader.onload=function(){var base64BinaryString=fileReader.result.split(",")[1];self._sendDataChannelMessage(peerId,base64BinaryString),self._setDataChannelTimeout(peerId,timeout,!0),self._trigger("dataTransferState",self.DATA_TRANSFER_STATE.UPLOADING,transferId,peerId,{percentage:((ackN+1)/chunksLength*100).toFixed()})},fileReader.readAsDataURL(self._uploadDataTransfers[peerId][ackN])}else ackN===chunksLength&&(self._trigger("dataTransferState",self.DATA_TRANSFER_STATE.UPLOAD_COMPLETED,transferId,peerId,{name:uploadedDetails.name}),delete self._uploadDataTransfers[peerId],delete self._uploadDataSessions[peerId]);else self._trigger("dataTransferState",self.DATA_TRANSFER_STATE.REJECTED,transferId,peerId,{name:self._uploadDataSessions[peerId].name,size:self._uploadDataSessions[peerId].size}),delete self._uploadDataTransfers[peerId],delete self._uploadDataSessions[peerId]},Skylink.prototype._MESSAGEProtocolHandler=function(peerId,data,channelName){var targetMid=data.sender;log.log([channelName,"RTCDataChannel",[targetMid,"MESSAGE"],"Received P2P message from peer:"],data),this._trigger("incomingMessage",{content:data.data,isPrivate:data.isPrivate,isDataChannel:!0,targetPeerId:this._user.sid,senderPeerId:targetMid},targetMid,this._peerInformations[targetMid],!1)},Skylink.prototype._ERRORProtocolHandler=function(peerId,data,channelName){var isUploader=data.isUploadError,transferId=isUploader?this._uploadDataSessions[peerId].transferId:this._downloadDataSessions[peerId].transferId;log.error([peerId,"RTCDataChannel",[channelName,"ERROR"],"Received an error from peer:"],data),this._clearDataChannelTimeout(peerId,isUploader),this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.ERROR,transferId,peerId,{},{name:data.name,message:data.content,transferType:isUploader?this.DATA_TRANSFER_TYPE.UPLOAD:this.DATA_TRANSFER_TYPE.DOWNLOAD})},Skylink.prototype._CANCELProtocolHandler=function(peerId,data,channelName){var isUpload=!!this._uploadDataSessions[peerId],transferId=(!!this._downloadDataSessions[peerId],isUpload?this._uploadDataSessions[peerId].transferId:this._downloadDataSessions[peerId].transferId);log.log([peerId,"RTCDataChannel",[channelName,"CANCEL"],"Received file transfer cancel request:"],data),this._clearDataChannelTimeout(peerId,isUploader),this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.CANCEL,transferId,peerId,{},{name:data.name,content:data.content,senderPeerId:data.sender,transferType:isUpload?this.DATA_TRANSFER_TYPE.UPLOAD:this.DATA_TRANSFER_TYPE.DOWNLOAD});try{isUpload?(delete this._uploadDataSessions[peerId],delete this._uploadDataTransfers[peerId]):(delete this._downloadDataSessions[peerId],delete this._downloadDataTransfers[peerId]),this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.CANCEL,transferId,peerId,{name:data.name,content:data.content,senderPeerId:data.sender,transferType:isUpload?this.DATA_TRANSFER_TYPE.UPLOAD:this.DATA_TRANSFER_TYPE.DOWNLOAD})}catch(error){this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.ERROR,{},{message:"Failed cancelling data request from peer",transferType:isUpload?this.DATA_TRANSFER_TYPE.UPLOAD:this.DATA_TRANSFER_TYPE.DOWNLOAD})}},Skylink.prototype._DATAProtocolHandler=function(peerId,dataString,dataType,channelName){var chunk,error="",transferStatus=this._downloadDataSessions[peerId];log.log([peerId,"RTCDataChannel",[channelName,"DATA"],"Received data chunk from peer. Data type:"],dataType);var transferId=transferStatus.transferId;if(this._clearDataChannelTimeout(peerId,!1),dataType===this.DATA_TRANSFER_DATA_TYPE.BINARY_STRING)chunk=this._base64ToBlob(dataString);else if(dataType===this.DATA_TRANSFER_DATA_TYPE.ARRAY_BUFFER)chunk=new Blob(dataString);else{if(dataType!==this.DATA_TRANSFER_DATA_TYPE.BLOB)return error="Unhandled data exception: "+dataType,log.error([peerId,"RTCDataChannel",[channelName,"DATA"],"Failed downloading data packets:"],error),void this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.ERROR,transferId,peerId,{},{message:error,transferType:this.DATA_TRANSFER_TYPE.DOWNLOAD});chunk=dataString}var receivedSize=chunk.size*(4/3);if(log.log([peerId,"RTCDataChannel",[channelName,"DATA"],"Received data chunk size:"],receivedSize),log.log([peerId,"RTCDataChannel",[channelName,"DATA"],"Expected data chunk size:"],transferStatus.chunkSize),transferStatus.chunkSize>=receivedSize){this._downloadDataTransfers[peerId].push(chunk),transferStatus.ackN+=1,transferStatus.receivedSize+=receivedSize;var totalReceivedSize=transferStatus.receivedSize,percentage=(totalReceivedSize/transferStatus.size*100).toFixed();if(this._sendDataChannelMessage(peerId,{type:this._DC_PROTOCOL_TYPE.ACK,sender:this._user.sid,ackN:transferStatus.ackN}),transferStatus.chunkSize===receivedSize)log.log([peerId,"RTCDataChannel",[channelName,"DATA"],"Transfer in progress"]),this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.DOWNLOADING,transferId,peerId,{percentage:percentage}),this._setDataChannelTimeout(peerId,transferStatus.timeout,!1),this._downloadDataTransfers[peerId].info=transferStatus;else{log.log([peerId,"RTCDataChannel",[channelName,"DATA"],"Download complete"]);var blob=new Blob(this._downloadDataTransfers[peerId]);this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.DOWNLOAD_COMPLETED,transferId,peerId,{data:blob}),delete this._downloadDataTransfers[peerId],delete this._downloadDataSessions[peerId]}}else error="Packet not match - [Received]"+receivedSize+" / [Expected]"+transferStatus.chunkSize,this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.ERROR,transferId,peerId,{},{message:error,transferType:this.DATA_TRANSFER_TYPE.DOWNLOAD}),log.error([peerId,"RTCDataChannel",[channelName,"DATA"],"Failed downloading data packets:"],error)},Skylink.prototype.sendBlobData=function(data,dataInfo,targetPeerId,callback){var self=this,error="";if("function"==typeof targetPeerId&&(callback=targetPeerId,targetPeerId=void 0),!self._enableDataChannel)return error="Unable to send any blob data. Datachannel is disabled",log.error(error),void("function"==typeof callback&&(log.log([null,"RTCDataChannel",null,"Error occurred. Firing callback with error -> "],error),callback(error,null)));if(arguments.length<2||"object"!=typeof data||"object"!=typeof dataInfo)return error="Either data or dataInfo was not supplied.",log.error(error),void("function"==typeof callback&&(log.log([null,"RTCDataChannel",null,"Error occurred. Firing callback with error -> "],error),callback(error,null)));if(!dataInfo.hasOwnProperty("name")||!dataInfo.hasOwnProperty("size"))return error="Either name or size is missing in dataInfo",log.error(error),void("function"==typeof callback&&(log.log([null,"RTCDataChannel",null,"Error occurred. Firing callback with error -> "],error),callback(error,null)));var noOfPeersSent=0;if(dataInfo.timeout=dataInfo.timeout||60,dataInfo.transferId=self._user.sid+self.DATA_TRANSFER_TYPE.UPLOAD+(new Date).toISOString().replace(/-/g,"").replace(/:/g,"").replace(".",""),targetPeerId)self._dataChannels.hasOwnProperty(targetPeerId)?(log.log([targetPeerId,null,null,"Sending blob data ->"],dataInfo),self._sendBlobDataToPeer(data,dataInfo,targetPeerId,!0),noOfPeersSent=1):log.error([targetPeerId,null,null,"Datachannel does not exist"]);else{targetPeerId=self._user.sid;for(var peerId in self._dataChannels)self._dataChannels.hasOwnProperty(peerId)?(self._sendBlobDataToPeer(data,dataInfo,peerId),noOfPeersSent++):log.error([peerId,null,null,"Datachannel does not exist"])}noOfPeersSent>0?self._trigger("dataTransferState",self.DATA_TRANSFER_STATE.UPLOAD_STARTED,dataInfo.transferId,targetPeerId,{transferId:dataInfo.transferId,senderPeerId:self._user.sid,name:dataInfo.name,size:dataInfo.size,timeout:dataInfo.timeout||60,data:data}):(error="No available datachannels to send data.",self._trigger("dataTransferState",self.DATA_TRANSFER_STATE.ERROR,dataInfo.transferId,targetPeerId,{},{message:error,transferType:self.DATA_TRANSFER_TYPE.UPLOAD}),log.error("Failed sending data: ",error),self._uploadDataTransfers=[],self._uploadDataSessions=[]),"function"==typeof callback&&(self.once("dataTransferState",function(state,transferId,peerId,transferInfo){log.log([null,"RTCDataChannel",null,"Firing callback. Data transfer state has met provided state ->"],state),callback(null,{state:state,transferId:transferId,peerId:peerId,transferInfo:transferInfo})},function(state){return state===self.DATA_TRANSFER_STATE.UPLOAD_COMPLETED},!1),self.once("dataTransferState",function(state,transferId,peerId,transferInfo,error){log.log([null,"RTCDataChannel",null,"Firing callback. Data transfer state has met provided state ->"],state),callback({state:state,error:error},null)},function(state){return state===self.DATA_TRANSFER_STATE.REJECTED||state===self.DATA_TRANSFER_STATE.CANCEL||state===self.DATA_TRANSFER_STATE.ERROR},!1))},Skylink.prototype.respondBlobRequest=function(peerId,accept){if(accept){log.info([peerId,null,null,"User accepted peer's request"]),this._downloadDataTransfers[peerId]=[];var data=this._downloadDataSessions[peerId];this._sendDataChannelMessage(peerId,{type:this._DC_PROTOCOL_TYPE.ACK,sender:this._user.sid,ackN:0,agent:window.webrtcDetectedBrowser}),this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.DOWNLOAD_STARTED,data.transferId,peerId,{name:data.name,size:data.size,senderPeerId:peerId})}else log.info([peerId,null,null,"User rejected peer's request"]),this._sendDataChannelMessage(peerId,{type:this._DC_PROTOCOL_TYPE.ACK,sender:this._user.sid,ackN:-1}),delete this._downloadDataSessions[peerId]},Skylink.prototype.cancelBlobTransfer=function(peerId,transferType){var data;if(transferType===this.DATA_TRANSFER_TYPE.UPLOAD&&!transferType)if(data=this._uploadDataSessions[peerId])delete this._uploadDataSessions[peerId],delete this._uploadDataTransfers[peerId],this._sendDataChannelMessage(peerId,{type:this._DC_PROTOCOL_TYPE.CANCEL,sender:this._user.sid,name:data.name,content:"Peer cancelled upload transfer"});else if(this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.ERROR,dataInfo.transferId,targetPeerId,{},{name:dataInfo.name,message:"Unable to cancel upload transfer. There is not ongoing upload sessions with the peer",transferType:this.DATA_TRANSFER_TYPE.UPLOAD}),transferType)return;transferType===this.DATA_TRANSFER_TYPE.DOWNLOAD&&(data=this._downloadDataSessions[peerId],data?(delete this._downloadDataSessions[peerId],delete this._downloadDataTransfers[peerId],this._sendDataChannelMessage(peerId,{type:this._DC_PROTOCOL_TYPE.CANCEL,sender:this._user.sid,name:data.name,content:"Peer cancelled download transfer"})):this._trigger("dataTransferState",this.DATA_TRANSFER_STATE.ERROR,dataInfo.transferId,targetPeerId,{},{name:dataInfo.name,message:"Unable to cancel download transfer. There is not ongoing download sessions with the peer",transferType:this.DATA_TRANSFER_TYPE.DOWNLOAD}))},Skylink.prototype.sendP2PMessage=function(message,targetPeerId){if(!this._enableDataChannel)return void log.warn("Unable to send any P2P message. Datachannel is disabled");if(targetPeerId){var useChannel=this._hasMCU?"MCU":targetPeerId;log.log([targetPeerId,null,useChannel,"Sending private P2P message to peer"]),this._sendDataChannelMessage(useChannel,{type:this._DC_PROTOCOL_TYPE.MESSAGE,isPrivate:!0,sender:this._user.sid,target:targetPeerId,data:message})}else if(this._hasMCU)log.log(["MCU",null,null,"Relaying P2P message to peers"]),this._sendDataChannelMessage("MCU",{type:this._DC_PROTOCOL_TYPE.MESSAGE,isPrivate:!1,sender:this._user.sid,data:message});else for(var peerId in this._dataChannels)this._dataChannels.hasOwnProperty(peerId)&&(log.log([peerId,null,null,"Sending P2P message to peer"]),this._sendDataChannelMessage(peerId,{type:this._DC_PROTOCOL_TYPE.MESSAGE,isPrivate:!1,sender:this._user.sid,data:message}));this._trigger("incomingMessage",{content:message,isPrivate:!!targetPeerId,targetPeerId:targetPeerId,isDataChannel:!0,senderPeerId:this._user.sid},this._user.sid,this.getPeerInfo(),!0)},Skylink.prototype._peerCandidatesQueue=[],Skylink.prototype.CANDIDATE_GENERATION_STATE={NEW:"new",GATHERING:"gathering",COMPLETED:"completed"},Skylink.prototype._onIceCandidate=function(targetMid,event){if(event.candidate){if(this._enableIceTrickle){var messageCan=event.candidate.candidate.split(" "),candidateType=messageCan[7];log.debug([targetMid,"RTCIceCandidate",null,"Created and sending "+candidateType+" candidate:"],event),this._sendChannelMessage({type:this._SIG_MESSAGE_TYPE.CANDIDATE,label:event.candidate.sdpMLineIndex,id:event.candidate.sdpMid,candidate:event.candidate.candidate,mid:this._user.sid,target:targetMid,rid:this._room.id})}}else if(log.debug([targetMid,"RTCIceCandidate",null,"End of gathering"]),this._trigger("candidateGenerationState",this.CANDIDATE_GENERATION_STATE.COMPLETED,targetMid),!this._enableIceTrickle){var sessionDescription=this._peerConnections[targetMid].localDescription;this._sendChannelMessage({type:sessionDescription.type,sdp:sessionDescription.sdp,mid:this._user.sid,agent:window.webrtcDetectedBrowser,target:targetMid,rid:this._room.id})}},Skylink.prototype._addIceCandidateToQueue=function(targetMid,candidate){log.debug([targetMid,null,null,"Queued candidate to add after setRemoteDescription"],candidate),this._peerCandidatesQueue[targetMid]=this._peerCandidatesQueue[targetMid]||[],this._peerCandidatesQueue[targetMid].push(candidate)},Skylink.prototype._addIceCandidateFromQueue=function(targetMid){if(this._peerCandidatesQueue[targetMid]=this._peerCandidatesQueue[targetMid]||[],this._peerCandidatesQueue[targetMid].length>0){for(var i=0;i<this._peerCandidatesQueue[targetMid].length;i++){var candidate=this._peerCandidatesQueue[targetMid][i];log.debug([targetMid,null,null,"Added queued candidate"],candidate),this._peerConnections[targetMid].addIceCandidate(candidate)}delete this._peerCandidatesQueue[targetMid]}else log.log([targetMid,null,null,"No queued candiate to add"])},Skylink.prototype.ICE_CONNECTION_STATE={STARTING:"starting",CHECKING:"checking",CONNECTED:"connected",COMPLETED:"completed",CLOSED:"closed",FAILED:"failed",DISCONNECTED:"disconnected"},Skylink.prototype.TURN_TRANSPORT={UDP:"udp",TCP:"tcp",ANY:"any",NONE:"none"},Skylink.prototype._enableIceTrickle=!0,Skylink.prototype._enableSTUN=!0,Skylink.prototype._enableTURN=!0,Skylink.prototype._TURNTransport="any",Skylink.prototype._setFirefoxIceServers=function(config){if("moz"===window.webrtcDetectedType){log.log("Updating firefox Ice server configuration",config);for(var newIceServers=[{url:"stun:stun.services.mozilla.com"}],i=0;i<config.iceServers.length;i++){var iceServer=config.iceServers[i],iceServerType=iceServer.url.split(":")[0];if("stun"===iceServerType){if(iceServer.url.indexOf("google"))continue;iceServer.url=[iceServer.url],newIceServers.push(iceServer)}else{var newIceServer={};newIceServer.credential=iceServer.credential,newIceServer.url=iceServer.url.split(":")[0],newIceServer.username=iceServer.url.split(":")[1].split("@")[0],newIceServer.url+=":"+iceServer.url.split(":")[1].split("@")[1],newIceServers.push(newIceServer)}}config.iceServers=newIceServers,log.debug("Updated firefox Ice server configuration: ",config)}return config},Skylink.prototype._setIceServers=function(config){config=this._setFirefoxIceServers(config);for(var i=0;i<config.iceServers.length;i++){var iceServer=config.iceServers[i],iceServerParts=iceServer.url.split(":");if("stun"===iceServerParts[0]||"stuns"===iceServerParts[0]){if(!this._enableSTUN){log.log("Removing STUN Server support"),config.iceServers.splice(i,1);continue}iceServerParts[0]=this._STUNSSL?"stuns":"stun",iceServer.url=iceServerParts.join(":")}if("turn"===iceServerParts[0]||"turns"===iceServerParts[0]){if(!this._enableTURN){log.log("Removing TURN Server support"),config.iceServers.splice(i,1);continue}if(iceServerParts[0]=this._TURNSSL?"turns":"turn",iceServer.url=iceServerParts.join(":"),log.log("Transport option:",this._TURNTransport),this._TURNTransport!==this.TURN_TRANSPORT.ANY)if(iceServer.url.indexOf("?transport=")>-1)if(this._TURNTransport===this.TURN_TRANSPORT.NONE)log.log("Removing transport option"),iceServer.url=iceServer.url.split("?")[0];else{log.log("Setting transport option");var urlProtocolParts=iceServer.url.split("=")[1];urlProtocolParts=this._TURNTransport,iceServer.url=urlProtocolParts.join("=")}else this._TURNTransport!==this.TURN_TRANSPORT.NONE&&(log.log("Setting transport option"),iceServer.url+="?transport="+this._TURNTransport)}config.iceServers[i]=iceServer,log.log("Output "+iceServerParts[0]+" configuration:",config.iceServers[i])}return log.log("Output iceServers configuration:",config.iceServers),config},Skylink.prototype.PEER_CONNECTION_STATE={STABLE:"stable",HAVE_LOCAL_OFFER:"have-local-offer",HAVE_REMOTE_OFFER:"have-remote-offer",HAVE_LOCAL_PRANSWER:"have-local-pranswer",HAVE_REMOTE_PRANSWER:"have-remote-pranswer",CLOSED:"closed"},Skylink.prototype._peerConnections=[],Skylink.prototype._addPeer=function(targetMid,peerBrowser,toOffer,restartConn,receiveOnly){var self=this;return self._peerConnections[targetMid]&&!restartConn?void log.error([targetMid,null,null,"Connection to peer has already been made"]):(log.log([targetMid,null,null,"Starting the connection to peer. Options provided:"],{peerBrowser:peerBrowser,toOffer:toOffer,receiveOnly:receiveOnly,enableDataChannel:self._enableDataChannel}),restartConn||(self._peerConnections[targetMid]=self._createPeerConnection(targetMid)),self._peerConnections[targetMid].receiveOnly=!!receiveOnly,receiveOnly||self._addLocalMediaStreams(targetMid),void(toOffer&&(self._enableDataChannel&&(self._dataChannels[targetMid]=self._createDataChannel(targetMid)),self._doOffer(targetMid,peerBrowser))))},Skylink.prototype._restartPeerConnection=function(peerId,isSelfInitiatedRestart,callback){var self=this;if(!self._peerConnections[peerId])return void log.error([peerId,null,null,"Peer does not have an existing connection. Unable to restart"]);log.log([peerId,null,null,"Restarting a peer connection"]);{var receiveOnly=!!self._peerConnections[peerId].receiveOnly,iceConnectionStateClosed=!1,peerConnectionStateClosed=!1;!self._enableDataChannel}self.once("iceConnectionState",function(){iceConnectionStateClosed=!0},function(state,currentPeerId){return state===self.ICE_CONNECTION_STATE.CLOSED&&peerId===currentPeerId}),self.once("peerConnectionState",function(){peerConnectionStateClosed=!0},function(state,currentPeerId){return state===self.PEER_CONNECTION_STATE.CLOSED&&peerId===currentPeerId}),delete self._peerConnectionHealth[peerId],self._peerConnections[peerId].close(),self._wait(function(){delete self._peerConnections[peerId],isSelfInitiatedRestart&&self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.RESTART,mid:self._user.sid,rid:self._room.id,agent:window.webrtcDetectedBrowser,version:window.webrtcDetectedVersion,userInfo:self.getPeerInfo(),target:peerId}),self._peerConnections[peerId]=self._createPeerConnection(peerId),self._peerConnections[peerId].receiveOnly=receiveOnly,receiveOnly||self._addLocalMediaStreams(peerId),"function"==typeof callback&&callback()},function(){return iceConnectionStateClosed&&peerConnectionStateClosed})},Skylink.prototype._removePeer=function(peerId){"MCU"!==peerId?this._trigger("peerLeft",peerId,this._peerInformations[peerId],!1):(this._hasMCU=!1,log.log([peerId,null,null,"MCU has stopped listening and left"])),this._peerConnections[peerId]&&(this._peerConnections[peerId].close(),delete this._peerConnections[peerId]),this._peerHSPriorities[peerId]&&delete this._peerHSPriorities[peerId],this._peerInformations[peerId]&&delete this._peerInformations[peerId],this._peerConnectionHealth[peerId]&&delete this._peerConnectionHealth[peerId],this._enableDataChannel&&this._closeDataChannel(),log.log([peerId,null,null,"Successfully removed peer"])},Skylink.prototype._createPeerConnection=function(targetMid){var pc,self=this;try{pc=new window.RTCPeerConnection(self._room.connection.peerConfig,self._room.connection.peerConstraints),log.info([targetMid,null,null,"Created peer connection"]),log.debug([targetMid,null,null,"Peer connection config:"],self._room.connection.peerConfig),log.debug([targetMid,null,null,"Peer connection constraints:"],self._room.connection.peerConstraints)}catch(error){return log.error([targetMid,null,null,"Failed creating peer connection:"],error),null}return pc.setOffer="",pc.setAnswer="",pc.ondatachannel=function(event){var dc=event.channel||event;log.debug([targetMid,"RTCDataChannel",dc.label,"Received datachannel ->"],dc),self._enableDataChannel?self._dataChannels[targetMid]=self._createDataChannel(targetMid,dc):log.warn([targetMid,"RTCDataChannel",dc.label,"Not adding datachannel"])},pc.onaddstream=function(event){self._onRemoteStreamAdded(targetMid,event)},pc.onicecandidate=function(event){log.debug([targetMid,"RTCIceCandidate",null,"Ice candidate generated ->"],event.candidate),self._onIceCandidate(targetMid,event)},pc.oniceconnectionstatechange=function(){checkIceConnectionState(targetMid,pc.iceConnectionState,function(iceConnectionState){log.debug([targetMid,"RTCIceConnectionState",null,"Ice connection state changed ->"],iceConnectionState),self._trigger("iceConnectionState",iceConnectionState,targetMid),iceConnectionState===self.ICE_CONNECTION_STATE.COMPLETED&&(log.debug([targetMid,"PeerConnectionHealth",null,"Peer connection with user is stable"]),self._peerConnectionHealth[targetMid]=!0,self._stopPeerConnectionHealthCheck(targetMid))})},pc.onsignalingstatechange=function(){log.debug([targetMid,"RTCSignalingState",null,"Peer connection state changed ->"],pc.signalingState),self._trigger("peerConnectionState",pc.signalingState,targetMid)},pc.onicegatheringstatechange=function(){log.log([targetMid,"RTCIceGatheringState",null,"Ice gathering state changed ->"],pc.iceGatheringState),self._trigger("candidateGenerationState",pc.iceGatheringState,targetMid)
},pc},Skylink.prototype.refreshConnection=function(peerId){var self=this;return self._peerConnections[peerId]?void(self._peerConnections[peerId]=self._restartPeerConnection(peerId,!0,function(){self._trigger("peerRestart",peerId,self._peerInformations[peerId]||{},!0)})):void log.error([peerId,null,null,"There is currently no existing peer connection made with the peer. Unable to restart connection"])},Skylink.prototype._peerInformations=[],Skylink.prototype._user=null,Skylink.prototype._userData="",Skylink.prototype.setUserData=function(userData){var self=this;self._condition("readyStateChange",function(){self._wait(function(){self._parseUserData(userData),self._inRoom?(log.log("Updated userData -> ",userData),self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.UPDATE_USER,mid:self._user.sid,rid:self._room.id,userData:self._userData}),self._trigger("peerUpdated",self._user.sid,self.getPeerInfo(),!0)):log.warn("User is not in the room. Broadcast of updated information will be dropped")},function(){return!!self._user})},function(){return self._readyState===self.READY_STATE_CHANGE.COMPLETED},function(state){return state===self.READY_STATE_CHANGE.COMPLETED})},Skylink.prototype.getUserData=function(){return this._userData},Skylink.prototype._parseUserData=function(userData){log.debug("Parsing user data:",userData),this._userData=userData||""},Skylink.prototype.getPeerInfo=function(peerId){return peerId&&peerId!==this._user.sid?this._peerInformations[peerId]||{}:(this._user=this._user||{},this._userData=this._userData||"",this._mediaStreamsStatus=this._mediaStreamsStatus||{},this._streamSettings=this._streamSettings||{},{userData:this._userData,settings:this._streamSettings,mediaStatus:this._mediaStreamsStatus,agent:{name:window.webrtcDetectedBrowser,version:window.webrtcDetectedVersion}})},Skylink.prototype.HANDSHAKE_PROGRESS={ENTER:"enter",WELCOME:"welcome",OFFER:"offer",ANSWER:"answer",ERROR:"error"},Skylink.prototype._peerConnectionHealthTimers=[],Skylink.prototype._peerConnectionHealth=[],Skylink.prototype._peerHSPriorities=[],Skylink.prototype._doOffer=function(targetMid,peerBrowser){var self=this,pc=self._peerConnections[targetMid]||self._addPeer(targetMid,peerBrowser);log.log([targetMid,null,null,"Checking caller status"],peerBrowser);var inputConstraints=self._room.connection.offerConstraints,sc=self._room.connection.sdpConstraints;for(var name in sc.mandatory)sc.mandatory.hasOwnProperty(name)&&(inputConstraints.mandatory[name]=sc.mandatory[name]);inputConstraints.optional.concat(sc.optional),checkMediaDataChannelSettings(peerBrowser.agent,peerBrowser.version,function(beOfferer,unifiedOfferConstraints){"moz"===window.webrtcDetectedType&&"MCU"===peerBrowser.agent&&(unifiedOfferConstraints.mandatory=unifiedOfferConstraints.mandatory||{},unifiedOfferConstraints.mandatory.MozDontOfferDataChannel=!0,beOfferer=!0),beOfferer?(log.debug([targetMid,null,null,"Creating offer with config:"],unifiedOfferConstraints),pc.createOffer(function(offer){log.debug([targetMid,null,null,"Created offer"],offer),self._setLocalAndSendMessage(targetMid,offer)},function(error){self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ERROR,targetMid,error),log.error([targetMid,null,null,"Failed creating an offer:"],error)},unifiedOfferConstraints)):(log.debug([targetMid,null,null,"User's browser is not eligible to create the offer to the other peer. Requesting other peer to create the offer instead"],peerBrowser),self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.WELCOME,mid:self._user.sid,rid:self._room.id,agent:window.webrtcDetectedBrowser,version:window.webrtcDetectedVersion,userInfo:self.getPeerInfo(),target:targetMid,weight:-1}))},inputConstraints)},Skylink.prototype._doAnswer=function(targetMid){var self=this;log.log([targetMid,null,null,"Creating answer with config:"],self._room.connection.sdpConstraints);var pc=self._peerConnections[targetMid];return pc?void pc.createAnswer(function(answer){log.debug([targetMid,null,null,"Created answer"],answer),self._setLocalAndSendMessage(targetMid,answer)},function(error){log.error([targetMid,null,null,"Failed creating an answer:"],error),self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ERROR,targetMid,error)},self._room.connection.sdpConstraints):void log.error([targetMid,null,null,"Requested to create an answer but user does not have any existing connection to peer"])},Skylink.prototype._startPeerConnectionHealthCheck=function(peerId){var self=this;log.log([peerId,"PeerConnectionHealth",null,"Initializing check for peer's connection health"]),self._peerConnectionHealthTimers[peerId]&&self._stopPeerConnectionHealthCheck(peerId),self._peerConnectionHealthTimers[peerId]=setTimeout(function(){self._peerConnectionHealth[peerId]||(log.warn([peerId,"PeerConnectionHealth",null,"Peer's health timer has expired"],1e4),self._stopPeerConnectionHealthCheck(peerId),log.debug([peerId,"PeerConnectionHealth",null,"Ice connection state time out. Re-negotiating connection"]),self._restartPeerConnection(peerId,!0))},1e4)},Skylink.prototype._stopPeerConnectionHealthCheck=function(peerId){var self=this;self._peerConnectionHealthTimers[peerId]?(log.debug([peerId,"PeerConnectionHealth",null,"Stopping peer connection health timer check"]),clearTimeout(self._peerConnectionHealthTimers[peerId]),delete self._peerConnectionHealthTimers[peerId]):log.debug([peerId,"PeerConnectionHealth",null,"Peer connection health does not have a timer check"])},Skylink.prototype._setLocalAndSendMessage=function(targetMid,sessionDescription){var self=this,pc=self._peerConnections[targetMid];if(sessionDescription.type===self.HANDSHAKE_PROGRESS.ANSWER&&pc.setAnswer)return void log.log([targetMid,"RTCSessionDescription",sessionDescription.type,"Ignoring session description. User has already set local answer"],sessionDescription);if(sessionDescription.type===self.HANDSHAKE_PROGRESS.OFFER&&pc.setOffer)return void log.log([targetMid,"RTCSessionDescription",sessionDescription.type,"Ignoring session description. User has already set local offer"],sessionDescription);var sdpLines=sessionDescription.sdp.split("\r\n");sdpLines=self._removeSDPFirefoxH264Pref(sdpLines),self._streamSettings.hasOwnProperty("audio")&&self._streamSettings.audio.stereo&&self._addSDPStereo(sdpLines),log.info([targetMid,null,null,"Requested stereo:"],self._streamSettings.audio&&self._streamSettings.audio.stereo?self._streamSettings.audio.stereo:!1),self._streamSettings.hasOwnProperty("bandwidth")&&(sdpLines=self._setSDPBitrate(sdpLines,self._streamSettings.bandwidth)),self._streamSettings.hasOwnProperty("video")&&(sdpLines=self._setSDPVideoResolution(sdpLines,self._streamSettings.video)),self._streamSettings.bandwidth=self._streamSettings.bandwidth||{},self._streamSettings.video=self._streamSettings.video||!1,log.info([targetMid,null,null,"Custom bandwidth settings:"],{audio:(self._streamSettings.bandwidth.audio||"Not set")+" kB/s",video:(self._streamSettings.bandwidth.video||"Not set")+" kB/s",data:(self._streamSettings.bandwidth.data||"Not set")+" kB/s"}),self._streamSettings.video.hasOwnProperty("frameRate")&&self._streamSettings.video.hasOwnProperty("resolution")&&log.info([targetMid,null,null,"Custom resolution settings:"],{frameRate:(self._streamSettings.video.frameRate||"Not set")+" fps",width:(self._streamSettings.video.resolution.width||"Not set")+" px",height:(self._streamSettings.video.resolution.height||"Not set")+" px"}),sessionDescription.sdp=sdpLines.join("\r\n"),log.log([targetMid,"RTCSessionDescription",sessionDescription.type,"Updated session description:"],sessionDescription),pc.setLocalDescription(sessionDescription,function(){log.debug([targetMid,sessionDescription.type,"Local description set"]),self._trigger("handshakeProgress",sessionDescription.type,targetMid),sessionDescription.type===self.HANDSHAKE_PROGRESS.ANSWER?pc.setAnswer="local":pc.setOffer="local",self._enableIceTrickle||!self._enableIceTrickle&&sessionDescription.type!==self.HANDSHAKE_PROGRESS.OFFER?self._sendChannelMessage({type:sessionDescription.type,sdp:sessionDescription.sdp,mid:self._user.sid,target:targetMid,rid:self._room.id}):log.log([targetMid,"RTCSessionDescription",sessionDescription.type,"Waiting for Ice gathering to complete to prevent Ice trickle"])},function(error){self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ERROR,targetMid,error),log.error([targetMid,"RTCSessionDescription",sessionDescription.type,"Failed setting local description: "],error)})},Skylink.prototype.SYSTEM_ACTION={WARNING:"warning",REJECT:"reject"},Skylink.prototype.SYSTEM_ACTION_REASON={FAST_MESSAGE:"fastmsg",ROOM_LOCKED:"locked",ROOM_FULL:"roomfull",DUPLICATED_LOGIN:"duplicatedLogin",SERVER_ERROR:"serverError",VERIFICATION:"verification",EXPIRED:"expired",ROOM_CLOSED:"roomclose",ROOM_CLOSING:"toclose",OVER_SEAT_LIMIT:"seatquota"},Skylink.prototype._selectedRoom=null,Skylink.prototype._roomLocked=!1,Skylink.prototype.joinRoom=function(room,mediaOptions,callback){var self=this;return"string"==typeof room?"function"==typeof mediaOptions&&(callback=mediaOptions,mediaOptions=void 0):"object"==typeof room?"function"==typeof mediaOptions?(callback=mediaOptions,mediaOptions=room,room=void 0):mediaOptions=room:"function"==typeof room&&(callback=room,room=void 0,mediaOptions=void 0),self._inRoom?void self.leaveRoom(function(){log.log([null,"Socket",self._selectedRoom,"Joining room. Media options:"],mediaOptions),"string"==typeof room?self._initSelectedRoom(room,function(){self._waitForOpenChannel(mediaOptions)}):self._waitForOpenChannel(mediaOptions)}):(log.log([null,"Socket",self._selectedRoom,"Joining room. Media options:"],mediaOptions),"string"==typeof room?self._initSelectedRoom(room,function(){self._waitForOpenChannel(mediaOptions)}):self._waitForOpenChannel(mediaOptions),void("function"==typeof callback&&self.once("peerJoined",function(peerId,peerInfo){log.log([null,"Socket",self._selectedRoom,"Peer joined. Firing callback. PeerId ->"],peerId),callback(null,{room:self._selectedRoom,peerId:peerId,peerInfo:peerInfo})},function(peerId,peerInfo,isSelf){return isSelf},!1)))},Skylink.prototype._waitForOpenChannel=function(mediaOptions){var self=this;self._socketCurrentReconnectionAttempt=0,self._condition("readyStateChange",function(){self._condition("channelOpen",function(){mediaOptions=mediaOptions||{},self._parseUserData(mediaOptions.userData),self._parseBandwidthSettings(mediaOptions.bandwidth),self._waitForLocalMediaStream(function(){self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.JOIN_ROOM,uid:self._user.uid,cid:self._key,rid:self._room.id,userCred:self._user.token,timeStamp:self._user.timeStamp,apiOwner:self._apiKeyOwner,roomCred:self._room.token,start:self._room.startDateTime,len:self._room.duration})},mediaOptions)},function(){return self._channelOpen||self._openChannel(),self._channelOpen},function(){return!0})},function(){return self._readyState===self.READY_STATE_CHANGE.COMPLETED},function(state){return state===self.READY_STATE_CHANGE.COMPLETED})},Skylink.prototype.leaveRoom=function(callback){var self=this;if(!self._inRoom){var error="Unable to leave room as user is not in any room";return log.error(error),void("function"==typeof callback&&(log.log([null,"Socket",self._selectedRoom,"Error occurred. Firing callback with error -> "],error),callback(error,null)))}for(var pc_index in self._peerConnections)self._peerConnections.hasOwnProperty(pc_index)&&self._removePeer(pc_index);self._inRoom=!1,self._closeChannel(),self._stopLocalMediaStreams(),"function"==typeof callback&&self._wait(function(){callback(null,{peerId:self._user.sid,previousRoom:self._selectedRoom,inRoom:self._inRoom}),log.log([null,"Socket",self._selectedRoom,"User left the room. Callback fired."]),self._trigger("peerLeft",self._user.sid,self.getPeerInfo(),!0)},function(){return 0===Object.keys(self._peerConnections).length&&self._channelOpen===!1&&self._readyState===self.READY_STATE_CHANGE.COMPLETED},!1)},Skylink.prototype.lockRoom=function(){log.log("Update to isRoomLocked status ->",!0),this._sendChannelMessage({type:this._SIG_MESSAGE_TYPE.ROOM_LOCK,mid:this._user.sid,rid:this._room.id,lock:!0}),this._trigger("roomLock",!0,this._user.sid,this.getPeerInfo(),!0)},Skylink.prototype.unlockRoom=function(){log.log("Update to isRoomLocked status ->",!1),this._sendChannelMessage({type:this._SIG_MESSAGE_TYPE.ROOM_LOCK,mid:this._user.sid,rid:this._room.id,lock:!1}),this._trigger("roomLock",!1,this._user.sid,this.getPeerInfo(),!0)},Skylink.prototype.READY_STATE_CHANGE={INIT:0,LOADING:1,COMPLETED:2,ERROR:-1},Skylink.prototype.READY_STATE_CHANGE_ERROR={API_INVALID:4001,API_DOMAIN_NOT_MATCH:4002,API_CORS_DOMAIN_NOT_MATCH:4003,API_CREDENTIALS_INVALID:4004,API_CREDENTIALS_NOT_MATCH:4005,API_INVALID_PARENT_KEY:4006,API_NOT_ENOUGH_CREDIT:4007,API_NOT_ENOUGH_PREPAID_CREDIT:4008,API_FAILED_FINDING_PREPAID_CREDIT:4009,API_NO_MEETING_RECORD_FOUND:4010,ROOM_LOCKED:5001,NO_SOCKET_IO:1,NO_XMLHTTPREQUEST_SUPPORT:2,NO_WEBRTC_SUPPORT:3,NO_PATH:4,INVALID_XMLHTTPREQUEST_STATUS:5,SCRIPT_ERROR:6},Skylink.prototype.REGIONAL_SERVER={APAC1:"sg",US1:"us2"},Skylink.prototype._forceSSL=!1,Skylink.prototype._path=null,Skylink.prototype._serverRegion=null,Skylink.prototype._roomServer="//api.temasys.com.sg",Skylink.prototype._apiKey=null,Skylink.prototype._defaultRoom=null,Skylink.prototype._roomStart=null,Skylink.prototype._roomDuration=null,Skylink.prototype._roomCredentials=null,Skylink.prototype._readyState=0,Skylink.prototype._key=null,Skylink.prototype._apiKeyOwner=null,Skylink.prototype._room=null,Skylink.prototype._requestServerInfo=function(method,url,callback,params){var self=this,useXDomainRequest="IE"===window.webrtcDetectedBrowser&&(9===window.webrtcDetectedVersion||8===window.webrtcDetectedVersion)&&"function"==typeof window.XDomainRequest;self._socketUseXDR=useXDomainRequest;var xhr;url=self._forceSSL?"https:"+url:url,useXDomainRequest?(log.debug([null,"XMLHttpRequest",method,"Using XDomainRequest. XMLHttpRequest is now XDomainRequest"],{agent:window.webrtcDetectedBrowser,version:window.webrtcDetectedVersion}),xhr=new XDomainRequest,xhr.setContentType=function(contentType){xhr.contentType=contentType}):(log.debug([null,"XMLHttpRequest",method,"Using XMLHttpRequest"],{agent:window.webrtcDetectedBrowser,version:window.webrtcDetectedVersion}),xhr=new window.XMLHttpRequest,xhr.setContentType=function(contentType){xhr.setRequestHeader("Content-type",contentType)}),xhr.onload=function(){var response=xhr.responseText||xhr.response,status=xhr.status||200;log.debug([null,"XMLHttpRequest",method,"Received sessions parameters"],JSON.parse(response||"{}")),callback(status,JSON.parse(response||"{}"))},xhr.onerror=function(){log.error([null,"XMLHttpRequest",method,"Failed retrieving information:"],{status:xhr.status})},xhr.onprogress=function(){log.debug([null,"XMLHttpRequest",method,"Retrieving information and config from webserver. Url:"],url),log.debug([null,"XMLHttpRequest",method,"Provided parameters:"],params)},xhr.open(method,url,!0),params?(xhr.setContentType("application/json;charset=UTF-8"),xhr.send(JSON.stringify(params))):xhr.send()},Skylink.prototype._parseInfo=function(info){return log.log("Parsing parameter from server",info),info.pc_constraints||info.offer_constraints?(log.debug("Peer connection constraints:",info.pc_constraints),log.debug("Offer constraints:",info.offer_constraints),this._key=info.cid,this._apiKeyOwner=info.apiOwner,this._signalingServer=info.ipSigserver,this._user={uid:info.username,token:info.userCred,timeStamp:info.timeStamp,streams:[],info:{}},this._room={id:info.room_key,token:info.roomCred,startDateTime:info.start,duration:info.len,connection:{peerConstraints:JSON.parse(info.pc_constraints),peerConfig:null,offerConstraints:JSON.parse(info.offer_constraints),sdpConstraints:{mandatory:{OfferToReceiveAudio:!0,OfferToReceiveVideo:!0}},mediaConstraints:JSON.parse(info.media_constraints)}},this._parseDefaultMediaStreamSettings(this._room.connection.mediaConstraints),this._readyState=2,this._trigger("readyStateChange",this.READY_STATE_CHANGE.COMPLETED),void log.info("Parsed parameters from webserver. Ready for web-realtime communication")):void this._trigger("readyStateChange",this.READY_STATE_CHANGE.ERROR,{status:200,content:info.info,errorCode:info.error})},Skylink.prototype._loadInfo=function(){var self=this;return window.io?window.XMLHttpRequest?window.RTCPeerConnection?self._path?(self._readyState=1,self._trigger("readyStateChange",self.READY_STATE_CHANGE.LOADING),void self._requestServerInfo("GET",self._path,function(status,response){if(200!==status){var errorMessage="XMLHttpRequest status not OK\nStatus was: "+status;return self._readyState=0,void self._trigger("readyStateChange",self.READY_STATE_CHANGE.ERROR,{status:status,content:response?response.info||errorMessage:errorMessage,errorCode:response.error||self.READY_STATE_CHANGE_ERROR.INVALID_XMLHTTPREQUEST_STATUS})}self._parseInfo(response)})):(log.error("Skylink is not initialised. Please call init() first"),void self._trigger("readyStateChange",self.READY_STATE_CHANGE.ERROR,{status:null,content:"No API Path is found",errorCode:self.READY_STATE_CHANGE_ERROR.NO_PATH})):(log.error("WebRTC not supported. Please upgrade your browser"),void self._trigger("readyStateChange",self.READY_STATE_CHANGE.ERROR,{status:null,content:"WebRTC not available",errorCode:self.READY_STATE_CHANGE_ERROR.NO_WEBRTC_SUPPORT})):(log.error("XMLHttpRequest not supported. Please upgrade your browser"),void self._trigger("readyStateChange",self.READY_STATE_CHANGE.ERROR,{status:null,content:"XMLHttpRequest not available",errorCode:self.READY_STATE_CHANGE_ERROR.NO_XMLHTTPREQUEST_SUPPORT})):(log.error("Socket.io not loaded. Please load socket.io"),void self._trigger("readyStateChange",self.READY_STATE_CHANGE.ERROR,{status:null,content:"Socket.io not found",errorCode:self.READY_STATE_CHANGE_ERROR.NO_SOCKET_IO}))},Skylink.prototype._initSelectedRoom=function(room,callback){var self=this;if("function"==typeof room||"undefined"==typeof room)return void log.error("Invalid room provided. Room:",room);var defaultRoom=self._defaultRoom,initOptions={roomServer:self._roomServer,defaultRoom:room||defaultRoom,apiKey:self._apiKey,region:self._serverRegion,enableDataChannel:self._enableDataChannel,enableIceTrickle:self._enableIceTrickle};self._roomCredentials&&(initOptions.credentials={credentials:self._roomCredentials,duration:self._roomDuration,startDateTime:self._roomStart}),self.init(initOptions),self._defaultRoom=defaultRoom,self._condition("readyStateChange",function(){callback()},function(){return self._readyState===self.READY_STATE_CHANGE.COMPLETED},function(state){return state===self.READY_STATE_CHANGE.COMPLETED})},Skylink.prototype.init=function(options,callback){var self=this;if("function"==typeof options&&(callback=options,options=void 0),!options){var error="No API key provided";return log.error(error),void("function"==typeof callback&&callback(error,null))}var apiKey,room,defaultRoom,region,startDateTime,duration,credentials,roomServer=self._roomServer,enableIceTrickle=!0,enableDataChannel=!0,enableSTUNServer=!0,enableTURNServer=!0,TURNTransport=self.TURN_TRANSPORT.ANY,audioFallback=!1,forceSSL=!1,socketTimeout=0;if(log.log("Provided init options:",options),"string"==typeof options)apiKey=options,defaultRoom=apiKey,room=apiKey;else{if(apiKey=options.apiKey,roomServer=options.roomServer||roomServer,roomServer=roomServer.lastIndexOf("/")===roomServer.length-1?roomServer.substring(0,roomServer.length-1):roomServer,region=options.region||region,defaultRoom=options.defaultRoom||apiKey,room=defaultRoom,enableIceTrickle="boolean"==typeof options.enableIceTrickle?options.enableIceTrickle:enableIceTrickle,enableDataChannel="boolean"==typeof options.enableDataChannel?options.enableDataChannel:enableDataChannel,enableSTUNServer="boolean"==typeof options.enableSTUNServer?options.enableSTUNServer:enableSTUNServer,enableTURNServer="boolean"==typeof options.enableTURNServer?options.enableTURNServer:enableTURNServer,forceSSL="boolean"==typeof options.forceSSL?options.forceSSL:forceSSL,socketTimeout="number"==typeof options.socketTimeout?options.socketTimeout:socketTimeout,socketTimeout=5e3>socketTimeout?5e3:socketTimeout,"string"==typeof options.TURNServerTransport)for(var type in self.TURN_TRANSPORT)if(self.TURN_TRANSPORT.hasOwnProperty(type)&&self.TURN_TRANSPORT[type]===options.TURNServerTransport){TURNTransport=options.TURNServerTransport;break}audioFallback=options.audioFallback||audioFallback,options.credentials&&(startDateTime=options.credentials.startDateTime||(new Date).toISOString(),duration=options.credentials.duration||200,credentials=options.credentials.credentials)}self._apiKey=apiKey,self._roomServer=roomServer,self._defaultRoom=defaultRoom,self._selectedRoom=room,self._serverRegion=region,self._path=roomServer+"/api/"+apiKey+"/"+room,credentials&&(self._roomStart=startDateTime,self._roomDuration=duration,self._roomCredentials=credentials,self._path+=credentials?"/"+startDateTime+"/"+duration+"?&cred="+credentials:""),region&&(self._path+=(self._path.indexOf("?&")>-1?"&":"?&")+"rg="+region),self._enableIceTrickle=enableIceTrickle,self._enableDataChannel=enableDataChannel,self._enableSTUN=enableSTUNServer,self._enableTURN=enableTURNServer,self._TURNTransport=TURNTransport,self._audioFallback=audioFallback,self._forceSSL=forceSSL,self._socketTimeout=socketTimeout,log.log("Init configuration:",{serverUrl:self._path,readyState:self._readyState,apiKey:self._apiKey,roomServer:self._roomServer,defaultRoom:self._defaultRoom,selectedRoom:self._selectedRoom,serverRegion:self._serverRegion,enableDataChannel:self._enableDataChannel,enableIceTrickle:self._enableIceTrickle,enableTURNServer:self._enableTURN,enableSTUNServer:self._enableSTUN,TURNTransport:self._TURNTransport,audioFallback:self._audioFallback,forceSSL:self._forceSSL,socketTimeout:self._socketTimeout}),self._readyState=0,self._trigger("readyStateChange",self.READY_STATE_CHANGE.INIT),self._loadInfo(),"function"==typeof callback&&(self.once("readyStateChange",function(readyState){log.log([null,"Socket",null,"Firing callback. Ready state change has met provided state ->"],readyState),callback(null,{serverUrl:self._path,readyState:self._readyState,apiKey:self._apiKey,roomServer:self._roomServer,defaultRoom:self._defaultRoom,selectedRoom:self._selectedRoom,serverRegion:self._serverRegion,enableDataChannel:self._enableDataChannel,enableIceTrickle:self._enableIceTrickle,enableTURNServer:self._enableTURN,enableSTUNServer:self._enableSTUN,TURNTransport:self._TURNTransport,audioFallback:self._audioFallback,forceSSL:self._forceSSL,socketTimeout:self._socketTimeout})},function(state){return state===self.READY_STATE_CHANGE.COMPLETED},!1),self.once("readyStateChange",function(readyState,error){log.log([null,"Socket",null,"Firing callback. Ready state change has met provided state ->"],readyState),callback(error,null)},function(state){return state===self.READY_STATE_CHANGE.ERROR},!1))},Skylink.prototype.LOG_LEVEL={DEBUG:4,LOG:3,INFO:2,WARN:1,ERROR:0};var _LOG_KEY="SkylinkJS",_LOG_LEVELS=["error","warn","info","log","debug"],_logLevel=0,_enableDebugMode=!1,_enableDebugStack=!1,_enableDebugTrace=!1,_storedLogs=[],_getStoredLogsFn=function(logLevel){if("undefined"==typeof logLevel)return _storedLogs;for(var returnLogs=[],i=0;i<_storedLogs.length;i++)_storedLogs[i][1]===_LOG_LEVELS[logLevel]&&returnLogs.push(_storedLogs[i]);return returnLogs},_clearAllStoredLogsFn=function(){_storedLogs=[]},_printAllStoredLogsFn=function(){for(var i=0;i<_storedLogs.length;i++){_storedLogs[i][0],"undefined"!==console[_storedLogs[i][1]]?_storedLogs[i][1]:"log",_storedLogs[i][2],_storedLogs[i][3]}};window.SkylinkLogs={getLogs:_getStoredLogsFn,clearAllLogs:_clearAllStoredLogsFn,printAllLogs:_printAllStoredLogsFn};var _logFn=function(logLevel,message,debugObject){var outputLog=_LOG_KEY;if("object"==typeof message){if(outputLog+=message[0]?" ["+message[0]+"] -":" -",outputLog+=message[1]?" <<"+message[1]+">>":"",message[2])if(outputLog+=" ","object"==typeof message[2])for(var i=0;i<message[2].length;i++)outputLog+="("+message[2][i]+")";else outputLog+="("+message[2]+")";outputLog+=" "+message[3]}else outputLog+=" - "+message;if(_enableDebugMode&&_enableDebugStack){var logItem=[new Date,_LOG_LEVELS[logLevel],outputLog];"undefined"!=typeof debugObject&&logItem.push(debugObject),_storedLogs.push(logItem)}if(_logLevel>=logLevel&&(logLevel="undefined"==typeof console[_LOG_LEVELS[logLevel]]?3:logLevel,_enableDebugMode&&_enableDebugTrace)){{"undefined"==typeof console.trace?logLevel[3]:"trace"}"undefined"!=typeof debugObject?"undefined"!=typeof console.trace:"undefined"!=typeof console.trace}},log={debug:function(message,object){_logFn(4,message,object)},log:function(message,object){_logFn(3,message,object)},info:function(message,object){_logFn(2,message,object)},warn:function(message,object){_logFn(1,message,object)},error:function(message,object){_logFn(0,message,object)}};Skylink.prototype.setLogLevel=function(logLevel){void 0===logLevel&&(logLevel=Skylink.LOG_LEVEL.WARN);for(var level in this.LOG_LEVEL)if(this.LOG_LEVEL[level]===logLevel)return _logLevel=logLevel,void log.log([null,"Log",level,"Log level exists. Level is set"]);log.error([null,"Log",level,"Log level does not exist. Level is not set"])},Skylink.prototype.setDebugMode=function(isDebugMode){return"object"==typeof isDebugMode&&(Object.keys(isDebugMode).length>0?(_enableDebugTrace=!!isDebugMode.trace,_enableDebugStack=!!isDebugMode.storeLogs):(_enableDebugMode=!1,_enableDebugTrace=!1,_enableDebugStack=!1)),isDebugMode===!1?(_enableDebugMode=!1,_enableDebugTrace=!1,void(_enableDebugStack=!1)):(_enableDebugMode=!0,_enableDebugTrace=!0,void(_enableDebugStack=!0))},Skylink.prototype._EVENTS={channelOpen:[],channelClose:[],channelMessage:[],channelError:[],channelRetry:[],socketError:[],readyStateChange:[],handshakeProgress:[],candidateGenerationState:[],peerConnectionState:[],peerConnectionHealth:[],iceConnectionState:[],mediaAccessError:[],mediaAccessSuccess:[],mediaAccessRequired:[],mediaAccessStopped:[],peerJoined:[],peerRestart:[],peerUpdated:[],peerLeft:[],presenceChanged:[],incomingStream:[],incomingMessage:[],roomLock:[],dataChannelState:[],dataTransferState:[],systemAction:[]},Skylink.prototype._onceEvents={},Skylink.prototype._trigger=function(eventName){var args=Array.prototype.slice.call(arguments),arr=this._EVENTS[eventName],once=this._onceEvents[eventName]||null;if(args.shift(),arr)for(var i=0;i<arr.length;i++)try{if(log.log([null,"Event",eventName,"Event is fired"]),arr[i].apply(this,args)===!1)break}catch(error){log.error([null,"Event",eventName,"Exception occurred in event:"],error)}if(once)for(var j=0;j<once.length;j++)if(once[j][1].apply(this,args)===!0){if(log.log([null,"Event",eventName,"Condition is met. Firing event"]),once[j][0].apply(this,args)===!1)break;once[j][2]||(log.log([null,"Event",eventName,"Removing event after firing once"]),once.splice(j,1),j--)}else log.log([null,"Event",eventName,"Condition is still not met. Holding event from being fired"]);log.log([null,"Event",eventName,"Event is triggered"])},Skylink.prototype.on=function(eventName,callback){"function"==typeof callback?(this._EVENTS[eventName]=this._EVENTS[eventName]||[],this._EVENTS[eventName].push(callback),log.log([null,"Event",eventName,"Event is subscribed"])):log.error([null,"Event",eventName,"Provided parameter is not a function"])},Skylink.prototype.once=function(eventName,callback,condition,fireAlways){"boolean"==typeof condition&&(fireAlways=condition,condition=null),fireAlways="undefined"==typeof fireAlways?!1:fireAlways,condition="function"!=typeof condition?function(){return!0}:condition,"function"==typeof callback?(this._EVENTS[eventName]=this._EVENTS[eventName]||[],this._onceEvents[eventName]=this._onceEvents[eventName]||[],this._onceEvents[eventName].push([callback,condition,fireAlways]),log.log([null,"Event",eventName,"Event is subscribed on condition"])):log.error([null,"Event",eventName,"Provided callback is not a function"])},Skylink.prototype.off=function(eventName,callback){if(void 0===callback)return this._EVENTS[eventName]=[],this._onceEvents[eventName]=[],void log.log([null,"Event",eventName,"All events are unsubscribed"]);for(var arr=this._EVENTS[eventName],once=this._onceEvents[eventName],i=0;i<arr.length;i++)if(arr[i]===callback){log.log([null,"Event",eventName,"Event is unsubscribed"]),arr.splice(i,1);break}if(void 0!==once)for(var j=0;j<once.length;j++)if(once[j][0]===callback){log.log([null,"Event",eventName,"One-time Event is unsubscribed"]),once.splice(j,1);break}},Skylink.prototype._condition=function(eventName,callback,checkFirst,condition,fireAlways){if("boolean"==typeof condition&&(fireAlways=condition,condition=null),"function"==typeof callback&&"function"==typeof checkFirst){if(checkFirst())return log.log([null,"Event",eventName,"First condition is met. Firing callback"]),void callback();log.log([null,"Event",eventName,"First condition is not met. Subscribing to event"]),this.once(eventName,callback,condition,fireAlways)}else log.error([null,"Event",eventName,"Provided callback or checkFirst is not a function"])},Skylink.prototype._wait=function(callback,condition,intervalTime,fireAlways){if(fireAlways="undefined"==typeof fireAlways?!1:fireAlways,"function"==typeof callback&&"function"==typeof condition){if(condition())return log.log([null,"Event",null,"Condition is met. Firing callback"]),void callback();log.log([null,"Event",null,"Condition is not met. Doing a check."]),intervalTime="number"==typeof intervalTime?intervalTime:50;var doWait=setInterval(function(){condition()&&(log.log([null,"Event",null,"Condition is met after waiting. Firing callback"]),fireAlways||clearInterval(doWait),callback())},intervalTime)}else"function"!=typeof callback&&log.error([null,"Event",null,"Provided callback is not a function"]),"function"!=typeof condition&&log.error([null,"Event",null,"Provided condition is not a function"])},Skylink.prototype.SOCKET_ERROR={CONNECTION_FAILED:0,RECONNECTION_FAILED:-1,CONNECTION_ABORTED:-2,RECONNECTION_ABORTED:-3,RECONNECTION_ATTEMPT:-4},Skylink.prototype.SOCKET_FALLBACK={NON_FALLBACK:"nonfallback",FALLBACK_PORT:"fallbackPortNonSSL",FALLBACK_SSL_PORT:"fallbackPortSSL",LONG_POLLING:"fallbackLongPollingNonSSL",LONG_POLLING_SSL:"fallbackLongPollingSSL"},Skylink.prototype._channelOpen=!1,Skylink.prototype._signalingServer=null,Skylink.prototype._signalingServerProtocol=window.location.protocol,Skylink.prototype._signalingServerPort="https:"===window.location.protocol?443:80,Skylink.prototype._socket=null,Skylink.prototype._socketTimeout=0,Skylink.prototype._socketUseXDR=!1,Skylink.prototype._sendChannelMessage=function(message){if(this._channelOpen){var messageString=JSON.stringify(message);log.debug([message.target?message.target:"server",null,null,"Sending to peer"+(message.target?"":"s")+" ->"],message.type),this._socket.send(messageString)}},Skylink.prototype._createSocket=function(url,options){var self=this;options=options||{},self._socket&&(self._socket.removeAllListeners("connect_error"),self._socket.removeAllListeners("reconnect_attempt"),self._socket.removeAllListeners("reconnect_error"),self._socket.removeAllListeners("reconnect_failed"),self._socket.removeAllListeners("connect"),self._socket.removeAllListeners("reconnect"),self._socket.removeAllListeners("error"),self._socket.removeAllListeners("disconnect"),self._socket.removeAllListeners("message"),self._socket.disconnect(),self._socket=null),self._channelOpen=!1,log.log("Opening channel with signaling server url:",{url:url,useXDR:self._socketUseXDR,socketOptions:options.socketOptions}),self._socket=io.connect(url,options.socketOptions),"function"==typeof options.connectErrorFn&&self._socket.on("connect_error",options.connectErrorFn),"function"==typeof options.reconnectAttemptFn&&self._socket.on("reconnect_attempt",options.reconnectAttemptFn),"function"==typeof options.reconnectErrorFn&&self._socket.on("reconnect_error",options.reconnectErrorFn),"function"==typeof options.reconnectFailedFn&&self._socket.on("reconnect_failed",options.reconnectFailedFn);
var connectFn=function(){self._channelOpen||(self._channelOpen=!0,self._trigger("channelOpen"),log.log([null,"Socket",null,"Channel opened"]))};self._socket.on("connect",connectFn),self._socket.on("reconnect",connectFn),self._socket.on("error",function(error){self._channelOpen=!1,self._trigger("channelError",error),log.error([null,"Socket",null,"Exception occurred:"],error)}),self._socket.on("disconnect",function(){self._channelOpen=!1,self._trigger("channelClose"),log.log([null,"Socket",null,"Channel closed"])}),self._socket.on("message",function(message){log.log([null,"Socket",null,"Received message"]),self._processSigMessage(message)})},Skylink.prototype._createDefaultSocket=function(){var self=this,ip_signaling=self._signalingServerProtocol+"//"+self._signalingServer+":"+self._signalingServerPort,socketOptions={forceNew:!0,reconnection:!1,transports:["websocket"]};0!==self._socketTimeout&&(socketOptions.timeout=self._socketTimeout);var connectErrorFn=function(error){self._channelOpen=!1,self._trigger("socketError",self.SOCKET_ERROR.CONNECTION_FAILED,error,self.SOCKET_FALLBACK.NON_FALLBACK),self._createFallbackSocket()};self._createSocket(ip_signaling,{socketOptions:socketOptions,connectErrorFn:connectErrorFn})},Skylink.prototype._createFallbackSocket=function(){var self=this,fallback="https:"===self._signalingServerProtocol?self.SOCKET_FALLBACK.FALLBACK_SSL_PORT:self.SOCKET_FALLBACK.FALLBACK_PORT;self._signalingServerPort="https:"===self._signalingServerProtocol?3443:3e3;var ip_signaling=self._signalingServerProtocol+"//"+self._signalingServer+":"+self._signalingServerPort,socketOptions={forceNew:!0,reconnection:!1,transports:["websocket"]};0!==self._socketTimeout&&(socketOptions.timeout=self._socketTimeout);var connectErrorFn=function(error){self._channelOpen=!1,self._trigger("socketError",self.SOCKET_ERROR.RECONNECTION_ABORTED,error,fallback),self._createLongpollingSocket()};self._createSocket(ip_signaling,{socketOptions:socketOptions,connectErrorFn:connectErrorFn}),self._trigger("channelRetry",fallback,0),self._trigger("socketError",self.SOCKET_ERROR.RECONNECTION_ATTEMPT,1,fallback)},Skylink.prototype._createLongpollingSocket=function(){var self=this,fallback="https:"===self._signalingServerProtocol?self.SOCKET_FALLBACK.LONG_POLLING_SSL:self.SOCKET_FALLBACK.LONG_POLLING;self._signalingServerPort="https:"===self._signalingServerProtocol?443:80;var ip_signaling=self._signalingServerProtocol+"//"+self._signalingServer+":"+self._signalingServerPort,socketOptions={forceNew:!0,reconnection:!0,transports:["xhr-polling","jsonp-polling","polling"]};0!==self._socketTimeout&&(socketOptions.timeout=self._socketTimeout);var reconnectAttemptFn=function(attempt){self._channelOpen=!1,self._trigger("socketError",self.SOCKET_ERROR.RECONNECTION_ATTEMPT,attempt,fallback),self._trigger("channelRetry",fallback,attempt)},reconnectErrorFn=function(error){self._channelOpen=!1,self._trigger("socketError",self.SOCKET_ERROR.RECONNECTION_FAILED,error,fallback)},reconnectFailedFn=function(error){self._channelOpen=!1,self._trigger("socketError",self.SOCKET_ERROR.RECONNECTION_ABORTED,error,fallback)};self._createSocket(ip_signaling,{socketOptions:socketOptions,reconnectAttemptFn:reconnectAttemptFn,reconnectErrorFn:reconnectErrorFn,reconnectFailedFn:reconnectFailedFn}),self._trigger("channelRetry",fallback,0),self._trigger("socketError",self.SOCKET_ERROR.RECONNECTION_ATTEMPT,1,fallback)},Skylink.prototype._openChannel=function(){var self=this;return self._channelOpen||self._readyState!==self.READY_STATE_CHANGE.COMPLETED?void log.error([null,"Socket",null,"Unable to instantiate a new channel connection as readyState is not ready or there is already an ongoing channel connection"]):(self._forceSSL?(self._signalingServerProtocol="https:",self._signalingServerPort=443):(self._signalingServerProtocol=window.location.protocol,self._signalingServerPort="https:"===window.location.protocol?443:80),void self._createDefaultSocket())},Skylink.prototype._closeChannel=function(){this._channelOpen&&(this._socket&&(this._socket.removeAllListeners("connect_error"),this._socket.removeAllListeners("reconnect_attempt"),this._socket.removeAllListeners("reconnect_error"),this._socket.removeAllListeners("reconnect_failed"),this._socket.removeAllListeners("connect"),this._socket.removeAllListeners("reconnect"),this._socket.removeAllListeners("error"),this._socket.removeAllListeners("disconnect"),this._socket.removeAllListeners("message"),this._socket.disconnect(),this._socket=null),this._channelOpen=!1,this._trigger("channelClose"))},Skylink.prototype._SIG_MESSAGE_TYPE={JOIN_ROOM:"joinRoom",IN_ROOM:"inRoom",ENTER:"enter",WELCOME:"welcome",RESTART:"restart",OFFER:"offer",ANSWER:"answer",CANDIDATE:"candidate",BYE:"bye",REDIRECT:"redirect",UPDATE_USER:"updateUserEvent",ROOM_LOCK:"roomLockEvent",MUTE_VIDEO:"muteVideoEvent",MUTE_AUDIO:"muteAudioEvent",PUBLIC_MESSAGE:"public",PRIVATE_MESSAGE:"private",GROUP:"group"},Skylink.prototype._hasMCU=!1,Skylink.prototype._processSigMessage=function(messageString){var message=JSON.parse(messageString);if(message.type===this._SIG_MESSAGE_TYPE.GROUP){log.debug("Bundle of "+message.lists.length+" messages");for(var i=0;i<message.lists.length;i++)this._processSingleMessage(message.lists[i])}else this._processSingleMessage(message)},Skylink.prototype._processSingleMessage=function(message){this._trigger("channelMessage",message);var origin=message.mid;if(origin&&origin!==this._user.sid||(origin="Server"),log.debug([origin,null,null,"Received from peer ->"],message.type),message.mid===this._user.sid&&message.type!==this._SIG_MESSAGE_TYPE.REDIRECT&&message.type!==this._SIG_MESSAGE_TYPE.IN_ROOM)return void log.debug([origin,null,null,"Ignoring message ->"],message.type);switch(message.type){case this._SIG_MESSAGE_TYPE.PUBLIC_MESSAGE:this._publicMessageHandler(message);break;case this._SIG_MESSAGE_TYPE.PRIVATE_MESSAGE:this._privateMessageHandler(message);break;case this._SIG_MESSAGE_TYPE.IN_ROOM:this._inRoomHandler(message);break;case this._SIG_MESSAGE_TYPE.ENTER:this._enterHandler(message);break;case this._SIG_MESSAGE_TYPE.WELCOME:this._welcomeHandler(message);break;case this._SIG_MESSAGE_TYPE.RESTART:this._restartHandler(message);break;case this._SIG_MESSAGE_TYPE.OFFER:this._offerHandler(message);break;case this._SIG_MESSAGE_TYPE.ANSWER:this._answerHandler(message);break;case this._SIG_MESSAGE_TYPE.CANDIDATE:this._candidateHandler(message);break;case this._SIG_MESSAGE_TYPE.BYE:this._byeHandler(message);break;case this._SIG_MESSAGE_TYPE.REDIRECT:this._redirectHandler(message);break;case this._SIG_MESSAGE_TYPE.UPDATE_USER:this._updateUserEventHandler(message);break;case this._SIG_MESSAGE_TYPE.MUTE_VIDEO:this._muteVideoEventHandler(message);break;case this._SIG_MESSAGE_TYPE.MUTE_AUDIO:this._muteAudioEventHandler(message);break;case this._SIG_MESSAGE_TYPE.ROOM_LOCK:this._roomLockEventHandler(message);break;default:log.error([message.mid,null,null,"Unsupported message ->"],message.type)}},Skylink.prototype._redirectHandler=function(message){log.log(["Server",null,message.type,"System action warning:"],{message:message.info,reason:message.reason,action:message.action}),this._trigger("systemAction",message.action,message.info,message.reason)},Skylink.prototype._updateUserEventHandler=function(message){var targetMid=message.mid;log.log([targetMid,null,message.type,"Peer updated userData:"],message.userData),this._peerInformations[targetMid]?(this._peerInformations[targetMid].userData=message.userData||{},this._trigger("peerUpdated",targetMid,this._peerInformations[targetMid],!1)):log.log([targetMid,null,message.type,"Peer does not have any user information"])},Skylink.prototype._roomLockEventHandler=function(message){var targetMid=message.mid;log.log([targetMid,message.type,"Room lock status:"],message.lock),this._trigger("roomLock",message.lock,targetMid,this._peerInformations[targetMid],!1)},Skylink.prototype._muteAudioEventHandler=function(message){var targetMid=message.mid;log.log([targetMid,null,message.type,"Peer's audio muted:"],message.muted),this._peerInformations[targetMid]?(this._peerInformations[targetMid].mediaStatus.audioMuted=message.muted,this._trigger("peerUpdated",targetMid,this._peerInformations[targetMid],!1)):log.log([targetMid,message.type,"Peer does not have any user information"])},Skylink.prototype._muteVideoEventHandler=function(message){var targetMid=message.mid;log.log([targetMid,null,message.type,"Peer's video muted:"],message.muted),this._peerInformations[targetMid]?(this._peerInformations[targetMid].mediaStatus.videoMuted=message.muted,this._trigger("peerUpdated",targetMid,this._peerInformations[targetMid],!1)):log.log([targetMid,null,message.type,"Peer does not have any user information"])},Skylink.prototype._byeHandler=function(message){var targetMid=message.mid;log.log([targetMid,null,message.type,"Peer has left the room"]),this._removePeer(targetMid)},Skylink.prototype._privateMessageHandler=function(message){var targetMid=message.mid;log.log([targetMid,null,message.type,"Received private message from peer:"],message.data),this._trigger("incomingMessage",{content:message.data,isPrivate:!0,targetPeerId:message.target,isDataChannel:!1,senderPeerId:targetMid},targetMid,this._peerInformations[targetMid],!1)},Skylink.prototype._publicMessageHandler=function(message){var targetMid=message.mid;log.log([targetMid,null,message.type,"Received public message from peer:"],message.data),this._trigger("incomingMessage",{content:message.data,isPrivate:!1,targetPeerId:null,isDataChannel:!1,senderPeerId:targetMid},targetMid,this._peerInformations[targetMid],!1)},Skylink.prototype._inRoomHandler=function(message){var self=this;log.log(["Server",null,message.type,"User is now in the room and functionalities are now available. Config received:"],message.pc_config),self._room.connection.peerConfig=self._setIceServers(message.pc_config),self._inRoom=!0,self._user.sid=message.sid,self._trigger("peerJoined",self._user.sid,self.getPeerInfo(),!0),self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ENTER,self._user.sid),self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.ENTER,mid:self._user.sid,rid:self._room.id,agent:window.webrtcDetectedBrowser,version:window.webrtcDetectedVersion,userInfo:self.getPeerInfo()})},Skylink.prototype._enterHandler=function(message){var self=this,targetMid=message.mid;if(log.log([targetMid,null,message.type,"Incoming peer have initiated handshake. Peer's information:"],message.userInfo),self._peerInformations[targetMid])return void log.log([targetMid,null,message.type,"Ignoring message as peer is already added"]);self._addPeer(targetMid,{agent:message.agent,version:message.version},!1,!1,message.receiveOnly),self._peerInformations[targetMid]=message.userInfo||{},self._peerInformations[targetMid].agent={name:message.agent,version:message.version},"MCU"!==targetMid?(self._trigger("peerJoined",targetMid,message.userInfo,!1),self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ENTER,targetMid),self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.WELCOME,targetMid)):(log.log([targetMid,null,message.type,"MCU has joined"],message.userInfo),this._hasMCU=!0);var weight=(new Date).valueOf();self._peerHSPriorities[targetMid]=weight,self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.WELCOME,mid:self._user.sid,rid:self._room.id,agent:window.webrtcDetectedBrowser,version:window.webrtcDetectedVersion,userInfo:self.getPeerInfo(),target:targetMid,weight:weight})},Skylink.prototype._restartHandler=function(message){var self=this,targetMid=message.mid;self._peerInformations[targetMid]=message.userInfo||{},self._peerInformations[targetMid].agent={name:message.agent,version:message.version},"MCU"===targetMid&&(log.log([targetMid,null,message.type,"MCU has restarted its connection"]),self._hasMCU=!0),self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.WELCOME,targetMid),message.agent=message.agent?message.agent:"chrome",self._enableIceTrickle="boolean"==typeof message.enableIceTrickle?message.enableIceTrickle:self._enableIceTrickle,self._enableDataChannel="boolean"==typeof message.enableDataChannel?message.enableDataChannel:self._enableDataChannel;self._restartPeerConnection(targetMid,!1,function(){self._addPeer(targetMid,{agent:message.agent,version:message.version},!0,!0,message.receiveOnly),self._trigger("peerRestart",targetMid,self._peerInformations[targetMid]||{},!1),self._startPeerConnectionHealthCheck(targetMid)})},Skylink.prototype._welcomeHandler=function(message){var targetMid=message.mid,restartConn=!1;if(log.log([targetMid,null,message.type,"Received peer's response to handshake initiation. Peer's information:"],message.userInfo),this._peerConnections[targetMid]){if(this._peerConnections[targetMid].setOffer&&!(message.weight<0))return void log.warn([targetMid,null,message.type,"Ignoring message as peer is already added"]);if(message.weight<0){if(log.log([targetMid,null,message.type,"Peer's weight is lower than 0. Proceeding with offer"],message.weight),restartConn=!0,-2===message.weight)return void this._restartHandler(message)}else{if(this._peerHSPriorities[targetMid]>message.weight)return void log.log([targetMid,null,message.type,"Peer's generated weight is lesser than user's. Ignoring message"],this._peerHSPriorities[targetMid]+" > "+message.weight);log.log([targetMid,null,message.type,"Peer's generated weight is higher than user's. Proceeding with offer"],this._peerHSPriorities[targetMid]+" < "+message.weight),restartConn=!0}}message.agent=message.agent?message.agent:"chrome",this._enableIceTrickle="boolean"==typeof message.enableIceTrickle?message.enableIceTrickle:this._enableIceTrickle,this._enableDataChannel="boolean"==typeof message.enableDataChannel?message.enableDataChannel:this._enableDataChannel,"MCU"===targetMid&&(log.log([targetMid,null,message.type,"MCU has "+(message.weight>-1?"joined and ":"")+" responded"]),this._hasMCU=!0),this._peerInformations[targetMid]||(this._peerInformations[targetMid]=message.userInfo||{},this._peerInformations[targetMid].agent={name:message.agent,version:message.version},"MCU"!==targetMid&&(this._trigger("peerJoined",targetMid,message.userInfo,!1),this._trigger("handshakeProgress",this.HANDSHAKE_PROGRESS.WELCOME,targetMid))),this._startPeerConnectionHealthCheck(targetMid),this._addPeer(targetMid,{agent:message.agent,version:message.version},!0,restartConn,message.receiveOnly)},Skylink.prototype._offerHandler=function(message){var self=this,targetMid=message.mid,pc=self._peerConnections[targetMid];if(!pc)return void log.error([targetMid,null,message.type,"Peer connection object not found. Unable to setRemoteDescription for offer"]);log.log([targetMid,null,message.type,"Received offer from peer. Session description:"],message.sdp),self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.OFFER,targetMid);var offer=new window.RTCSessionDescription(message);log.log([targetMid,"RTCSessionDescription",message.type,"Session description object created"],offer),pc.setRemoteDescription(new window.RTCSessionDescription(offer),function(){log.debug([targetMid,"RTCSessionDescription",message.type,"Remote description set"]),pc.setOffer="remote",self._addIceCandidateFromQueue(targetMid),self._doAnswer(targetMid)},function(error){self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ERROR,targetMid,error),log.error([targetMid,null,message.type,"Failed setting remote description:"],error)})},Skylink.prototype._candidateHandler=function(message){var targetMid=message.mid,pc=this._peerConnections[targetMid];log.log([targetMid,null,message.type,"Received candidate from peer. Candidate config:"],{sdp:message.sdp,target:message.target,candidate:message.candidate,label:message.label});var messageCan=message.candidate.split(" "),canType=messageCan[7];log.log([targetMid,null,message.type,"Candidate type:"],canType);var index=message.label,candidate=new window.RTCIceCandidate({sdpMLineIndex:index,candidate:message.candidate});pc?"local"===pc.setOffer&&"remote"===pc.setAnswer||"local"===pc.setAnswer&&"remote"===pc.setOffer?(pc.addIceCandidate(candidate),log.debug([targetMid,"RTCIceCandidate",message.type,"Added candidate"],candidate)):this._addIceCandidateToQueue(targetMid,candidate):(log.debug([targetMid,"RTCIceCandidate",message.type,"Not adding candidate as peer connection not present"]),this._addIceCandidateToQueue(targetMid,candidate))},Skylink.prototype._answerHandler=function(message){var self=this,targetMid=message.mid;log.log([targetMid,null,message.type,"Received answer from peer. Session description:"],message.sdp),self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ANSWER,targetMid);var answer=new window.RTCSessionDescription(message);log.log([targetMid,"RTCSessionDescription",message.type,"Session description object created"],answer);var pc=self._peerConnections[targetMid];"moz"===window.webrtcDetectedType&&"MCU"===targetMid&&(message.sdp=message.sdp.replace(/ generation 0/g,""),message.sdp=message.sdp.replace(/ udp /g," UDP ")),pc.setRemoteDescription(new window.RTCSessionDescription(answer),function(){log.debug([targetMid,null,message.type,"Remote description set"]),pc.setAnswer="remote",self._addIceCandidateFromQueue(targetMid)},function(error){self._trigger("handshakeProgress",self.HANDSHAKE_PROGRESS.ERROR,targetMid,error),log.error([targetMid,null,message.type,"Failed setting remote description:"],error)})},Skylink.prototype.sendMessage=function(message,targetPeerId){var params={cid:this._key,data:message,mid:this._user.sid,rid:this._room.id,type:this._SIG_MESSAGE_TYPE.PUBLIC_MESSAGE};targetPeerId&&(params.target=targetPeerId,params.type=this._SIG_MESSAGE_TYPE.PRIVATE_MESSAGE),log.log([targetPeerId,null,null,"Sending message to peer"+(targetPeerId?"s":"")]),this._sendChannelMessage(params),this._trigger("incomingMessage",{content:message,isPrivate:targetPeerId?!0:!1,targetPeerId:targetPeerId||null,isDataChannel:!1,senderPeerId:this._user.sid},this._user.sid,this.getPeerInfo(),!0)},Skylink.prototype.VIDEO_RESOLUTION={QQVGA:{width:160,height:120,aspectRatio:"4:3"},HQVGA:{width:240,height:160,aspectRatio:"3:2"},QVGA:{width:320,height:180,aspectRatio:"4:3"},WQVGA:{width:384,height:240,aspectRatio:"16:10"},HVGA:{width:480,height:320,aspectRatio:"3:2"},VGA:{width:640,height:360,aspectRatio:"4:3"},WVGA:{width:768,height:480,aspectRatio:"16:10"},FWVGA:{width:854,height:480,aspectRatio:"16:9"},SVGA:{width:800,height:600,aspectRatio:"4:3"},DVGA:{width:960,height:640,aspectRatio:"3:2"},WSVGA:{width:1024,height:576,aspectRatio:"16:9"},HD:{width:1280,height:720,aspectRatio:"16:9"},HDPLUS:{width:1600,height:900,aspectRatio:"16:9"},FHD:{width:1920,height:1080,aspectRatio:"16:9"},QHD:{width:2560,height:1440,aspectRatio:"16:9"},WQXGAPLUS:{width:3200,height:1800,aspectRatio:"16:9"},UHD:{width:3840,height:2160,aspectRatio:"16:9"},UHDPLUS:{width:5120,height:2880,aspectRatio:"16:9"},FUHD:{width:7680,height:4320,aspectRatio:"16:9"},QUHD:{width:15360,height:8640,aspectRatio:"16:9"}},Skylink.prototype._mediaStreams=[],Skylink.prototype._defaultStreamSettings={audio:{stereo:!1},video:{resolution:{width:640,height:480},frameRate:50},bandwidth:{audio:50,video:256,data:1638400}},Skylink.prototype._streamSettings={},Skylink.prototype._getUserMediaSettings={},Skylink.prototype._mediaStreamsStatus={},Skylink.prototype._audioFallback=!1,Skylink.prototype._onUserMediaSuccess=function(stream){var self=this;log.log([null,"MediaStream",stream.id,"User has granted access to local media"],stream),self._trigger("mediaAccessSuccess",stream),self._condition("readyStateChange",function(){self._mediaStreams[stream.id]=stream,self._muteLocalMediaStreams(),self._condition("peerJoined",function(){self._trigger("incomingStream",self._user.sid,stream,!0,self.getPeerInfo())},function(){return self._inRoom},function(peerId,peerInfo,isSelf){return isSelf})},function(){return self._readyState===self.READY_STATE_CHANGE.COMPLETED},function(state){return state===self.READY_STATE_CHANGE.COMPLETED})},Skylink.prototype._onUserMediaError=function(error){var self=this;log.error([null,"MediaStream",null,"Failed retrieving stream:"],error),self._audioFallback&&self._streamSettings.video?(self._streamSettings.video=!1,log.debug([null,"MediaStream",null,"Falling back to audio stream call"]),window.getUserMedia({audio:!0},function(stream){self._onUserMediaSuccess(stream)},function(error){log.error([null,"MediaStream",null,"Failed retrieving audio in audio fallback:"],error),self._trigger("mediaAccessError",error)}),this.getUserMedia({audio:!0})):(log.error([null,"MediaStream",null,"Failed retrieving stream:"],error),self._trigger("mediaAccessError",error))},Skylink.prototype._onRemoteStreamAdded=function(targetMid,event){if("MCU"!==targetMid){if(!this._peerInformations[targetMid])return void log.error([targetMid,"MediaStream",event.stream.id,"Received remote stream when peer is not connected. Ignoring stream ->"],event.stream);if(!this._peerInformations[targetMid].settings.audio&&!this._peerInformations[targetMid].settings.video)return void log.log([targetMid,"MediaStream",event.stream.id,"Receive remote stream but ignoring stream as it is empty ->"],event.stream);log.log([targetMid,"MediaStream",event.stream.id,"Received remote stream ->"],event.stream),this._trigger("incomingStream",targetMid,event.stream,!1,this._peerInformations[targetMid])}else log.log([targetMid,null,null,"MCU is listening"])},Skylink.prototype._parseAudioStreamSettings=function(audioOptions){if(audioOptions="object"==typeof audioOptions?audioOptions:!!audioOptions,audioOptions!==!1){audioOptions="boolean"==typeof audioOptions?{}:audioOptions;var tempAudioOptions={};tempAudioOptions.stereo=!!audioOptions.stereo,audioOptions=tempAudioOptions}var userMedia="object"==typeof audioOptions?!0:audioOptions;return{settings:audioOptions,userMedia:userMedia}},Skylink.prototype._parseVideoStreamSettings=function(videoOptions){videoOptions="object"==typeof videoOptions?videoOptions:!!videoOptions;var userMedia=!1;if(videoOptions!==!1){videoOptions="boolean"==typeof videoOptions?{resolution:{}}:videoOptions;var tempVideoOptions={};videoOptions.resolution=videoOptions.resolution||{},tempVideoOptions.resolution=tempVideoOptions.resolution||{},tempVideoOptions.resolution.width=videoOptions.resolution.width||this._defaultStreamSettings.video.resolution.width,tempVideoOptions.resolution.height=videoOptions.resolution.height||this._defaultStreamSettings.video.resolution.height,tempVideoOptions.frameRate=videoOptions.frameRate||this._defaultStreamSettings.video.frameRate,videoOptions=tempVideoOptions,userMedia={mandatory:{maxWidth:videoOptions.resolution.width,maxHeight:videoOptions.resolution.height,maxFrameRate:videoOptions.frameRate},optional:[]};for(var key in navigator.plugins)if("TemWebRTCPlugin"===navigator.plugins[key].name){userMedia={mandatory:{maxWidth:videoOptions.resolution.width,maxHeight:videoOptions.resolution.height},optional:[]};break}}return{settings:videoOptions,userMedia:userMedia}},Skylink.prototype._parseBandwidthSettings=function(bwOptions){bwOptions="object"==typeof bwOptions?bwOptions:{},bwOptions.audio="number"==typeof bwOptions.audio?bwOptions.audio:50,bwOptions.video="number"==typeof bwOptions.video?bwOptions.video:256,bwOptions.data="number"==typeof bwOptions.data?bwOptions.data:1638400,this._streamSettings.bandwidth=bwOptions},Skylink.prototype._parseMutedSettings=function(options){options="object"==typeof options?options:{audio:!1,video:!1};var updateAudioMuted="object"==typeof options.audio?!!options.audio.mute:!options.audio,updateVideoMuted="object"==typeof options.video?!!options.video.mute:!options.video;return{audioMuted:updateAudioMuted,videoMuted:updateVideoMuted}},Skylink.prototype._parseDefaultMediaStreamSettings=function(options){options=options||{},log.debug("Parsing stream settings. Default stream options:",options),options.maxWidth="number"==typeof options.maxWidth?options.maxWidth:640,options.maxHeight="number"==typeof options.maxHeight?options.maxHeight:480,this._defaultStreamSettings.video.resolution.width=options.maxWidth,this._defaultStreamSettings.video.resolution.height=options.maxHeight,log.debug("Parsed default media stream settings",this._defaultStreamSettings)},Skylink.prototype._parseMediaStreamSettings=function(options){options=options||{},log.debug("Parsing stream settings. Stream options:",options);var audioSettings=this._parseAudioStreamSettings(options.audio);this._streamSettings.audio=audioSettings.settings,this._getUserMediaSettings.audio=audioSettings.userMedia;var videoSettings=this._parseVideoStreamSettings(options.video);this._streamSettings.video=videoSettings.settings,this._getUserMediaSettings.video=videoSettings.userMedia;var mutedSettings=this._parseMutedSettings(options);this._mediaStreamsStatus=mutedSettings,log.debug("Parsed user media stream settings",this._streamSettings),log.debug("User media status:",this._mediaStreamsStatus)},Skylink.prototype._addLocalMediaStreams=function(peerId){try{if(log.log([peerId,null,null,"Adding local stream"]),Object.keys(this._mediaStreams).length>0)for(var stream in this._mediaStreams)this._mediaStreams.hasOwnProperty(stream)&&(this._peerConnections[peerId].addStream(this._mediaStreams[stream]),log.debug([peerId,"MediaStream",stream,"Sending stream"]));else log.warn([peerId,null,null,"No media to send. Will be only receiving"])}catch(error){log.error([peerId,null,null,"Failed adding local stream"],error)}},Skylink.prototype._stopLocalMediaStreams=function(){for(var streamId in this._mediaStreams)this._mediaStreams.hasOwnProperty(streamId)&&this._mediaStreams[streamId].stop();Object.keys(this._mediaStreams).length>0&&this._trigger("mediaAccessStopped"),this._mediaStreams=[]},Skylink.prototype._muteLocalMediaStreams=function(){var hasAudioTracks=!1,hasVideoTracks=!1;for(var streamId in this._mediaStreams)if(this._mediaStreams.hasOwnProperty(streamId)){var audioTracks=this._mediaStreams[streamId].getAudioTracks(),videoTracks=this._mediaStreams[streamId].getVideoTracks();hasAudioTracks=audioTracks.length>0||hasAudioTracks,hasVideoTracks=videoTracks.length>0||hasVideoTracks;for(var a=0;a<audioTracks.length;a++)audioTracks[a].enabled=this._mediaStreamsStatus.audioMuted!==!0;for(var v=0;v<videoTracks.length;v++)videoTracks[v].enabled=this._mediaStreamsStatus.videoMuted!==!0}return hasAudioTracks||(this._streamSettings.audio=!1),hasVideoTracks||(this._streamSettings.video=!1),log.log("Update to isAudioMuted status ->",this._mediaStreamsStatus.audioMuted),log.log("Update to isVideoMuted status ->",this._mediaStreamsStatus.videoMuted),{hasAudioTracks:hasAudioTracks,hasVideoTracks:hasVideoTracks}},Skylink.prototype._waitForLocalMediaStream=function(callback,options){var self=this;options=options||{},options.manualGetUserMedia===!0&&self._trigger("mediaAccessRequired");var requireAudio=!!options.audio,requireVideo=!!options.video;if(log.log("Requested audio:",requireAudio),log.log("Requested video:",requireVideo),!requireAudio&&!requireVideo&&!options.manualGetUserMedia)return options.audio===!1&&options.video===!1&&self._parseMediaStreamSettings(options),void callback();options.manualGetUserMedia||!options.audio&&!options.video||self.getUserMedia({audio:options.audio,video:options.video}),self._stopLocalMediaStreams();var current50Block=0,mediaAccessRequiredFailure=!1;self._wait(function(){mediaAccessRequiredFailure===!0?self._onUserMediaError("Waiting for stream timeout"):callback()},function(){var hasAudio=!requireAudio,hasVideo=!requireVideo;for(var streamId in self._mediaStreams)if(self._mediaStreams.hasOwnProperty(streamId)){var stream=self._mediaStreams[streamId];if(stream&&options.manualGetUserMedia)return!0;if(requireAudio&&(hasAudio=stream.getAudioTracks().length>0),requireVideo&&(hasVideo=stream.getVideoTracks().length>0),hasAudio&&hasVideo)return!0}return options.manualGetUserMedia===!0&&(current50Block+=1,600===current50Block)?(mediaAccessRequiredFailure=!0,!0):void 0},50)},Skylink.prototype.getUserMedia=function(options,callback){var self=this;if(options?"function"==typeof options&&(callback=options,options={audio:!0,video:!0}):options={audio:!0,video:!0},self._parseMediaStreamSettings(options),options.audio!==!1||options.video!==!1){self._stopLocalMediaStreams();try{window.getUserMedia(self._getUserMediaSettings,function(stream){self._onUserMediaSuccess(stream),"function"==typeof callback&&callback(null,stream)},function(error){self._onUserMediaError(error),"function"==typeof callback&&callback(error,null)})}catch(error){self._onUserMediaError(error),"function"==typeof callback&&callback(error,null)}}else log.warn([null,"MediaStream",null,"Not retrieving stream"])},Skylink.prototype.sendStream=function(stream,callback){var self=this,restartCount=0,peerCount=Object.keys(self._peerConnections).length;if("object"!=typeof stream){var error="Provided stream settings is not an object";return log.error(error),void("function"==typeof callback&&callback(error,null))}if("function"==typeof stream.getAudioTracks||"function"==typeof stream.getVideoTracks){self._stopLocalMediaStreams(),self._mediaStreams[stream.id]||self._onUserMediaSuccess(stream),self._mediaStreamsStatus.audioMuted=!1,self._mediaStreamsStatus.videoMuted=!1,self._streamSettings.audio=stream.getAudioTracks().length>0,self._streamSettings.video=stream.getVideoTracks().length>0;for(var peer in self._peerConnections)self._peerConnections.hasOwnProperty(peer)&&self._restartPeerConnection(peer,!0);"function"==typeof callback&&self.once("peerRestart",function(){log.log([null,"MediaStream",stream.id,"Stream was sent. Firing callback"],stream),callback(null,stream),restartCount=0},function(peerId,peerInfo,isSelfInitiatedRestart){return isSelfInitiatedRestart&&(restartCount++,restartCount===peerCount)?!0:!1},!1),self._trigger("peerUpdated",self._user.sid,self.getPeerInfo(),!0)}else self._waitForLocalMediaStream(function(){for(var peer in self._peerConnections)self._peerConnections.hasOwnProperty(peer)&&self._restartPeerConnection(peer,!0);"function"==typeof callback&&self.once("peerRestart",function(){log.log([null,"MediaStream",stream.id,"Stream was sent. Firing callback"],stream),callback(null,stream),restartCount=0},function(peerId,peerInfo,isSelfInitiatedRestart){return isSelfInitiatedRestart&&(restartCount++,restartCount===peerCount)?!0:!1},!1),self._trigger("peerUpdated",self._user.sid,self.getPeerInfo(),!0)},stream)},Skylink.prototype.muteStream=function(options){var self=this;if("object"!=typeof options)return void log.error("Provided settings is not an object");"boolean"==typeof options.audioMuted&&(self._mediaStreamsStatus.audioMuted=!!options.audioMuted),"boolean"==typeof options.videoMuted&&(self._mediaStreamsStatus.videoMuted=!!options.videoMuted);var hasTracksOption=self._muteLocalMediaStreams(),refetchAudio=!1,refetchVideo=!1;hasTracksOption.hasAudioTracks||(refetchAudio=options.audioMuted===!1&&options.getEmptyStream===!0),hasTracksOption.hasVideoTracks||(refetchVideo=options.videoMuted===!1&&options.getEmptyStream===!0),refetchAudio||refetchVideo?(self._parseMediaStreamSettings({audio:options.audioMuted===!1||self._streamSettings.audio,video:options.videoMuted===!1||self._streamSettings.video}),self.getUserMedia(self._streamSettings),self.once("mediaAccessSuccess",function(){for(var peer in self._peerConnections)self._peerConnections.hasOwnProperty(peer)&&self._restartPeerConnection(peer,!0);self._trigger("peerUpdated",self._user.sid,self.getPeerInfo(),!0)})):(hasTracksOption.hasVideoTracks&&self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.MUTE_VIDEO,mid:self._user.sid,rid:self._room.id,muted:self._mediaStreamsStatus.videoMuted}),hasTracksOption.hasAudioTracks&&setTimeout(function(){self._sendChannelMessage({type:self._SIG_MESSAGE_TYPE.MUTE_AUDIO,mid:self._user.sid,rid:self._room.id,muted:self._mediaStreamsStatus.audioMuted})},1050),self._trigger("peerUpdated",self._user.sid,self.getPeerInfo(),!0))},Skylink.prototype.enableAudio=function(){this.muteStream({audioMuted:!1,getEmptyStream:!0})
},Skylink.prototype.disableAudio=function(){this.muteStream({audioMuted:!0,getEmptyStream:!0})},Skylink.prototype.enableVideo=function(){this.muteStream({videoMuted:!1,getEmptyStream:!0})},Skylink.prototype.disableVideo=function(){this.muteStream({videoMuted:!0,getEmptyStream:!0})},Skylink.prototype._findSDPLine=function(sdpLines,condition){for(var index in sdpLines)if(sdpLines.hasOwnProperty(index))for(var c=0;c<condition.length;c++)if(0===sdpLines[index].indexOf(condition[c]))return[index,sdpLines[index]];return[]},Skylink.prototype._addSDPStereo=function(sdpLines){var opusLineFound=!1,opusPayload=0,rtpmapLine=this._findSDPLine(sdpLines,["a=rtpmap:"]);if(rtpmapLine.length&&0===rtpmapLine[1].split(" ")[1].indexOf("opus/48000/")&&(opusLineFound=!0,opusPayload=rtpmapLine[1].split(" ")[0].split(":")[1]),opusLineFound){var fmtpLine=this._findSDPLine(sdpLines,["a=fmtp:"+opusPayload]);fmtpLine.length&&(sdpLines[fmtpLine[0]]=fmtpLine[1]+"; stereo=1")}return sdpLines},Skylink.prototype._setSDPVideoResolution=function(sdpLines){var video=this._streamSettings.video,frameRate=video.frameRate||50,resolution=video.resolution||{},fmtpLine=this._findSDPLine(sdpLines,["a=fmtp:"]);return fmtpLine.length&&sdpLines.splice(fmtpLine[0],1,fmtpLine[1]+";max-fr="+frameRate+";max-recv-width="+(resolution.width?resolution.width:640)+";max-recv-height="+(resolution.height?resolution.height:480)),sdpLines},Skylink.prototype._setSDPBitrate=function(sdpLines){var bandwidth=this._streamSettings.bandwidth,maLineFound=this._findSDPLine(sdpLines,["m=","a="]).length,cLineFound=this._findSDPLine(sdpLines,["c="]).length;if(maLineFound&&cLineFound){if(bandwidth.audio){var audioLine=this._findSDPLine(sdpLines,["a=audio","m=audio"]);sdpLines.splice(audioLine[0],1,audioLine[1],"b=AS:"+bandwidth.audio)}if(bandwidth.video){var videoLine=this._findSDPLine(sdpLines,["a=video","m=video"]);sdpLines.splice(videoLine[0],1,videoLine[1],"b=AS:"+bandwidth.video)}if(bandwidth.data&&this._enableDataChannel){var dataLine=this._findSDPLine(sdpLines,["a=application","m=application"]);sdpLines.splice(dataLine[0],1,dataLine[1],"b=AS:"+bandwidth.data)}}return sdpLines},Skylink.prototype._removeSDPFirefoxH264Pref=function(sdpLines){var invalidLineIndex=sdpLines.indexOf("a=fmtp:0 profile-level-id=0x42e00c;packetization-mode=1");return invalidLineIndex>-1&&(log.debug("Firefox H264 invalid pref found:",invalidLineIndex),sdpLines.splice(invalidLineIndex,1)),sdpLines},window.Skyway=Skylink}).call(this);